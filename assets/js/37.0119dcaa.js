(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{446:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"map源码分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map源码分析"}},[s._v("#")]),s._v(" Map源码分析")]),s._v(" "),t("p",[s._v("参考网址"),t("a",{attrs:{href:"https://golang.design/go-questions/map/principal/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://golang.design/go-questions/map/principal/"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"神马是map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#神马是map"}},[s._v("#")]),s._v(" 神马是map")]),s._v(" "),t("p",[s._v("map可以被被称为相关数组、map、符号表或者字典，是由一组"),t("code",[s._v("<key, value>")]),s._v("对组成的抽象数据结构，并且同一个"),t("code",[s._v("key")]),s._v("只会出现一次。")]),s._v(" "),t("p",[s._v("map的基础操作：")]),s._v(" "),t("ul",[t("li",[s._v("增加一个k-v对")]),s._v(" "),t("li",[s._v("删除一个k-v对")]),s._v(" "),t("li",[s._v("修改某个k对应的v")]),s._v(" "),t("li",[s._v("查询某个k对应的v")])]),s._v(" "),t("p",[s._v("最主要的数据有两种：哈希查找表、搜索树")]),s._v(" "),t("ul",[t("li",[s._v("哈希查找表用一个哈希函数将key分配到不同的桶（bucket，也就是数组的不同index）。这样，开销主要在哈希函数的计算以及数组的常数访问时间。在很多场景下，哈希查找表的性能很高。\n哈希查找表一般会存在“碰撞”的问题，就是说不同的key被哈希到了同一个bucket。一般有两种应对方法：\n"),t("ol",[t("li",[s._v("链表法：将一个bucket实现成一个链表，落在同一个bucket中的key都会插入这个链表。")]),s._v(" "),t("li",[s._v("开放地址法：则是碰撞发生后，通过一定的规律，在数组的后面挑选“空位”，用来放置新的 key。")])])]),s._v(" "),t("li",[s._v("搜索树法一般采用自平衡搜索树，包括：AVL 树，红黑树")])]),s._v(" "),t("p",[s._v("自平衡搜索树法的最差搜索效率是 O(logN)，而哈希查找表最差是 O(N)。")]),s._v(" "),t("p",[s._v("当然，哈希查找表的平均查找效率是 O(1)，如果哈希函数设计的很好，最坏的情况基本不会出现。")]),s._v(" "),t("p",[s._v("另外，遍历自平衡搜索树，返回的 key 序列，一般会按照从小到大的顺序；而哈希查找表则是乱序的。")]),s._v(" "),t("h2",{attrs:{id:"map的底层如何实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map的底层如何实现"}},[s._v("#")]),s._v(" map的底层如何实现")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Go映射的头部结构。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" hmap "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 元素个数，调用 len(map) 时，直接返回此值")]),s._v("\n    count     "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n    flags     "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// buckets 的对数 log_2")]),s._v("\n    B         "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// overflow 的 bucket 近似数")]),s._v("\n    noverflow "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint16")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 计算 key 的哈希的时候会传入哈希函数")]),s._v("\n    hash0     "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向 buckets 数组，大小为 2^B")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果元素个数为0，就为 nil")]),s._v("\n    buckets    unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等量扩容的时候，buckets 长度和 oldbuckets 相等")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 双倍扩容的时候，buckets 长度会是 oldbuckets 的两倍")]),s._v("\n    oldbuckets unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指示扩容进度，小于此地址的 buckets 迁移完成")]),s._v("\n    nevacuate  "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 可选参数")]),s._v("\n    extra "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mapextra\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[s._v("B 是 buckets 数组的长度的对数，也就是说 buckets 数组的长度就是 2^B。bucket 里面存储了 key 和 value。")]),s._v(" "),t("p",[s._v("buckets 是一个指针，最终它指向的是一个结构体.")]),s._v(" "),t("p",[s._v("bucket的内存模型，HOB Hash 指的就是 top hash。 注意到 key 和 value 是各自放在一起的，并不是 key/value/key/value/... 这样的形式。\n源码里说明这样的好处是在某些情况下可以省略掉 padding 字段，节省内存空间。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// eg")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int8")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果按照 key/value/key/value/... 这样的模式存储，那在每一个 key/value 对之后都要额外 padding 7 个字节。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 而将所有的 key，value 分别绑定到一起，这种形式 key/key/.../value/value/...，则只需要在最后添加 padding。")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" bmap "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    tophash "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("bucketCnt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译期间会动态地创建一个新的结构")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" bmap "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    topbits  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("\n    keys     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("keytype\n    values   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("valuetype\n    pad      "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n    overflow "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("bmap 就是我们常说的“桶”，桶里面会最多装 8 个 key，这些 key 之所以会落入同一个桶，是因为它们经过哈希计算后，哈希结果是“一类”的。在桶内，又会根据 key 计算出来的 hash 值的高 8 位来决定 key 到底落入桶内的哪个位置（一个桶内最多有8个位置）。")]),s._v(" "),t("p",[s._v("如果有第 9 个 key-value 落入当前的 bucket，那就需要再构建一个 bucket ，通过 overflow 指针连接起来。")]),s._v(" "),t("p",[s._v("当 map 的 key 和 value 都不是指针，并且 size 都小于 128 字节的情况下，会把 bmap 标记为不含指针，这样可以避免 gc 时扫描整个 hmap。")]),s._v(" "),t("p",[s._v("但是，bmap 其实有一个 overflow 的字段，是指针类型的，破坏了 bmap 不含指针的设想，这时会把 overflow 移动到 extra 字段来。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" mapextra "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// overflow[0] contains overflow buckets for hmap.buckets.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// overflow[1] contains overflow buckets for hmap.oldbuckets.")]),s._v("\n    overflow "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("bmap\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nextOverflow 包含空闲的 overflow bucket，这是预分配的 bucket")]),s._v("\n    nextOverflow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("bmap\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h2",{attrs:{id:"创建map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建map"}},[s._v("#")]),s._v(" 创建map")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[s._v("ageMp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指定 map 长度")]),s._v("\nageMp "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ageMp 为 nil，不能向其添加元素，会直接panic")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" ageMp "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("通过汇编语言可以看到，实际上底层调用的是 makemap 函数，主要做的工作就是初始化 hmap 结构体的各种字段，例如计算 B 的大小，设置哈希种子 hash0 等等。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("makemap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("maptype"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" hint "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int64")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" h "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("hmap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bucket unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("hmap "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略各种条件检查...")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 找到一个 B，使得 map 的装载因子在正常范围内")]),s._v("\n    B "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uint8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("overLoadFactor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hint"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化 hash table")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 B 等于 0，那么 buckets 就会在赋值的时候再分配")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果长度比较大，分配内存会花费长一点")]),s._v("\n    buckets "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" bucket\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" extra "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mapextra\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" B "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" nextOverflow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("bmap\n        buckets"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nextOverflow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("makeBucketArray")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" B"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" nextOverflow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            extra "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mapextra"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            extra"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nextOverflow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nextOverflow\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化 hmap")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" h "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        h "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("hmap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("newobject")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hmap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("count "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("B "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" B\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("extra "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" extra\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("flags "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("hash0 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("fastrand")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("buckets "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" buckets\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("oldbuckets "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("nil")]),s._v("\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("nevacuate "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("noverflow "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" h\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br")])]),t("h3",{attrs:{id:"slice和map分别作为函数参数有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#slice和map分别作为函数参数有什么区别"}},[s._v("#")]),s._v(" slice和map分别作为函数参数有什么区别")]),s._v(" "),t("p",[s._v("这个函数返回的结果：*hmap，它是一个指针，而我们之前讲过的 makeslice 函数返回的是 Slice 结构体。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// runtime/slice.go")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 结构体内部包含底层的数据指针。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" slice "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    array unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 元素指针")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 长度 ")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("cap")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 容量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("makemap 和 makeslice 的区别，带来一个不同点：当 map 和 slice 作为函数参数时，在函数参数内部对 map 的操作会影响 map 自身；而对 slice 却不会。")]),s._v(" "),t("p",[s._v("主要原因：一个是指针（"),t("code",[s._v("*hmap")]),s._v("），一个是结构体（"),t("code",[s._v("slice")]),s._v("）。\nGo 语言中的函数传参都是值传递，在函数内部，参数会被 copy 到本地。"),t("code",[s._v("*hmap")]),s._v("指针copy完之后，仍然指向同一个map，因此函数内部对map的操作会影响实参。而slice被copy后，会成为一个新的 slice，对它进行的操作不会影响到实参。")]),s._v(" "),t("h2",{attrs:{id:"哈希函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希函数"}},[s._v("#")]),s._v(" 哈希函数")]),s._v(" "),t("p",[s._v("map 的一个关键点在于，哈希函数的选择。在程序启动时，会检测 cpu 是否支持 aes，如果支持，则使用 aes hash，否则使用 memhash。\n这是在函数 alginit() 中完成，位于路径：src/runtime/alg.go 下。")]),s._v(" "),t("blockquote",[t("p",[s._v("hash 函数，有加密型和非加密型。加密型的一般用于加密数据、数字摘要等，典型代表就是 md5、sha1、sha256、aes256 这种；非加密型的一般就是查找。在map的应用场景中，用的是查找。选择 hash 函数主要考察的是两点：性能、碰撞概率。")])]),s._v(" "),t("p",[s._v("表示类型的结构体：")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" _type "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    size       "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n    ptrdata    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// size of memory prefix holding all pointers")]),s._v("\n    hash       "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint32")]),s._v("\n    tflag      tflag\n    align      "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("\n    fieldalign "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("\n    kind       "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uint8")]),s._v("\n    alg        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("typeAlg "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 和哈希有关，指向下结构体的指针")]),s._v("\n    gcdata    "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("byte")]),s._v("\n    str       nameOff\n    ptrToThis typeOff\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// src/runtime/alg.go")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" typeAlg "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (ptr to object, seed) -> hash")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// hash 函数计算类型的哈希值")]),s._v("\n    hash "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (ptr to object A, ptr to object B) -> ==?")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// equal 函数则计算两个类型是否“哈希相等”")]),s._v("\n    equal "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// string类型，它的hash、equal函数如下：")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("strhash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" h "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("uintptr")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("stringStruct"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("memhash")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("str"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" h"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uintptr")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("strequal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" q unsafe"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Pointer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("q"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 根据 key 的类型，_type 结构体的 alg 字段会被设置对应类型的 hash 和 equal 函数")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("h2",{attrs:{id:"key定位过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key定位过程"}},[s._v("#")]),s._v(" key定位过程")]),s._v(" "),t("p",[s._v("太复杂～ 2024.9.5略过～")]),s._v(" "),t("h2",{attrs:{id:"如何实现两种get操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何实现两种get操作"}},[s._v("#")]),s._v(" 如何实现两种get操作")]),s._v(" "),t("p",[s._v("Go 语言中读取 map 有两种语法：带 comma 和 不带 comma。\n当要查询的 key 不在 map 里，带 comma 的用法会返回一个 bool 型变量提示 key 是否在 map 中；而不带 comma 的语句则会返回一个 key 对应 value 类型的零值。\n如果 value 是 int 型就会返回 0，如果 value 是 string 类型，就会返回空字符串。")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    ageMap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    ageMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fang"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不带 comma 用法")]),s._v("\n    age1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" ageMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cy"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 带 comma 用法")]),s._v("\n    age2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ok "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" ageMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cy"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("age2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" ok"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("从上面两个函数的声明也可以看出差别了，mapaccess2 函数返回值多了一个 bool 型变量，两者的代码也是完全一样的，只是在返回值后面多加了一个 false 或者 true。")]),s._v(" "),t("p",[s._v("另外，根据 key 的不同类型，编译器还会将查找、插入、删除的函数用更具体的函数替换，以优化效率。")]),s._v(" "),t("p",[s._v("这些函数的参数类型直接是具体的 uint32、unt64、string，在函数内部由于提前知晓了key的类型，所以内存布局是很清楚的，因此能节省很多操作，提高效率。")]),s._v(" "),t("h2",{attrs:{id:"遍历过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遍历过程"}},[s._v("#")]),s._v(" 遍历过程")]),s._v(" "),t("p",[s._v("遍历所有bucket以及后面的overflow bucker，挨个遍历bucket中的cell，从有key的cell中取出key和value，过程结束。")]),s._v(" "),t("p",[s._v("～ 好吧gpt总结一下")]),s._v(" "),t("ol",[t("li",[s._v("初始化迭代器：\n"),t("ul",[t("li",[s._v("在遍历开始时，调用"),t("code",[s._v("mapiterinit")]),s._v("函数初始化迭代器（"),t("code",[s._v("hiter")]),s._v("结构体），设置起始桶和偏移量。")])])]),s._v(" "),t("li",[s._v("随机起始位置：\n"),t("ul",[t("li",[s._v("通过生成随机数，确定从哪个桶开始遍历（"),t("code",[s._v("startBucket")]),s._v("）和桶内的哪个单元（"),t("code",[s._v("offset")]),s._v("）。")])])]),s._v(" "),t("li",[s._v("遍历新老桶：\n"),t("ul",[t("li",[s._v("遍历过程中，首先检查当前桶是否为老桶。如果是老桶，需判断其是否已完成迁移（通过"),t("code",[s._v("tophash")]),s._v("值判断）。")]),s._v(" "),t("li",[s._v("如果老桶已迁移，则只遍历新桶；如果未迁移，则需要遍历老桶中分配到新桶的键。")])])]),s._v(" "),t("li",[s._v("处理溢出桶：\n"),t("ul",[t("li",[s._v("在遍历过程中，如果当前桶的内容已满，可能需要访问溢出桶（"),t("code",[s._v("overflow bucket")]),s._v("）以获取更多键值对。")])])]),s._v(" "),t("li",[s._v("扩容后的处理：\n"),t("ul",[t("li",[s._v("在扩容时，老桶会分裂成两个新桶。遍历时需确保只取出那些在分裂后分配到新桶中的键。")])])]),s._v(" "),t("li",[s._v("遍历结束：\n"),t("ul",[t("li",[s._v("遍历会继续进行，直到所有相关的桶（新桶和老桶）都被访问完毕。")])])])]),s._v(" "),t("p",[s._v("关键点：")]),s._v(" "),t("ul",[t("li",[s._v("无序性：每次遍历的结果是无序的，因为"),t("code",[s._v("map")]),s._v("的内部实现并不保证顺序。")]),s._v(" "),t("li",[s._v("扩容处理：扩容时，老桶的键会根据哈希值重新分配到新桶中，遍历时需注意这一点。")]),s._v(" "),t("li",[s._v("特殊情况：对于特殊键（如"),t("code",[s._v("math.NaN()")]),s._v("），处理方式类似，需根据哈希值的最低位决定其分配到哪个桶。")])]),s._v(" "),t("h3",{attrs:{id:"如果遍历的时候发生了扩容-会怎么样"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如果遍历的时候发生了扩容-会怎么样"}},[s._v("#")]),s._v(" 如果遍历的时候发生了扩容，会怎么样？")]),s._v(" "),t("p",[s._v("2倍扩容时，老bucket会分裂到2个新bucket中去。\n而遍历操作，会按照新bucket的序号顺序进行，碰到老bucket未搬迁的情况时，要在老bucket中找到将来要搬迁到新bucket来的 key。")]),s._v(" "),t("h2",{attrs:{id:"赋值过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值过程"}},[s._v("#")]),s._v(" 赋值过程")]),s._v(" "),t("p",[s._v("go向map中插入或者修改key，最终调用的是mapassign函数。")]),s._v(" "),t("p",[s._v("插入或修改key的语法是一样的，前者操作的key在map中不存在，而后者操作的key存在 map 中。")]),s._v(" "),t("p",[s._v("一样会对mapassign函数优化，根据key类型不同，优化成对应的“快速函数”。")]),s._v(" "),t("p",[s._v("赋值流程非常得简单：对key计算hash值，根据hash值按照之前的流程，找到要赋值的位置（可能是插入新key，也可能是更新老key），对相应位置进行赋值。")]),s._v(" "),t("p",[s._v("源码核心是一个双层循环，外层遍历 bucket 和它的 overflow bucket，内层遍历整个 bucket 的各个 cell。")]),s._v(" "),t("h3",{attrs:{id:"过程重要点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#过程重要点"}},[s._v("#")]),s._v(" 过程重要点")]),s._v(" "),t("ol",[t("li",[s._v("标志位检查：\n"),t("ul",[t("li",[s._v("函数会首先检查"),t("code",[s._v("map")]),s._v("的标志位（"),t("code",[s._v("flags")]),s._v("）。如果写标志位被置为1，说明有其他协程在进行写操作，可能导致程序panic。这表明"),t("code",[s._v("map")]),s._v("在并发环境下是不安全的。")])])]),s._v(" "),t("li",[s._v("扩容处理：\n"),t("ul",[t("li",[s._v("如果"),t("code",[s._v("map")]),s._v("正在扩容中，函数会确保当前桶的老桶已完成迁移，所有键都已迁移到新的桶中。只有在迁移完成后，才能安全地在新桶中进行插入或更新操作。")])])]),s._v(" "),t("li",[s._v("键位置定位：\n"),t("ul",[t("li",[s._v("在定位键的位置时，使用两个指针：一个指向"),t("code",[s._v("tophash")]),s._v("数组中的位置，另一个指向键最终放置的地址。如果找到的空位，表示可以插入新键；如果桶已满，需要使用溢出桶（"),t("code",[s._v("overflow bucket")]),s._v("）。")])])]),s._v(" "),t("li",[s._v("扩容条件检查：\n"),t("ul",[t("li",[s._v("在插入键之前，检查"),t("code",[s._v("map")]),s._v("是否需要扩容。如果满足条件，则触发扩容操作，并重新计算键的位置。")])])]),s._v(" "),t("li",[s._v("值的赋值：\n"),t("ul",[t("li",[t("code",[s._v("mapassign")]),s._v("函数用于确定键值对的存储位置，但赋值操作在函数内部完成，函数返回的是指向值的地址。")])])])]),s._v(" "),t("p",[s._v("Go语言确保在"),t("code",[s._v("map")]),s._v("的扩容和遍历中维持数据的一致性和安全性。")]),s._v(" "),t("h2",{attrs:{id:"删除过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除过程"}},[s._v("#")]),s._v(" 删除过程")]),s._v(" "),t("ol",[t("li",[s._v("优化的删除函数：\n"),t("ul",[t("li",[s._v("根据键的类型不同，删除操作会被优化为特定的函数，例如：\n"),t("ul",[t("li",[t("code",[s._v("uint32")]),s._v("类型："),t("code",[s._v("mapdelete_fast32")])]),s._v(" "),t("li",[t("code",[s._v("uint64")]),s._v("类型："),t("code",[s._v("mapdelete_fast64")])]),s._v(" "),t("li",[t("code",[s._v("string")]),s._v("类型："),t("code",[s._v("mapdelete_faststr")])])])])])]),s._v(" "),t("li",[s._v("检查并发写入：\n"),t("ul",[t("li",[s._v("在执行删除操作时，首先检查"),t("code",[s._v("h.flags")]),s._v("标志。如果写标志位为1，表示有其他协程正在进行写操作，直接触发panic。")])])]),s._v(" "),t("li",[s._v("计算哈希并定位桶：\n"),t("ul",[t("li",[s._v("计算要删除的键的哈希值，并找到对应的桶。如果"),t("code",[s._v("map")]),s._v("正在扩容，触发一次搬迁操作以确保数据一致性。")])])]),s._v(" "),t("li",[s._v("查找键的位置：\n"),t("ul",[t("li",[s._v("删除操作使用两层循环，逐个检查桶中的单元（cell），寻找要删除的键。")])])]),s._v(" "),t("li",[s._v("清零操作：\n"),t("ul",[t("li",[s._v("找到对应位置后，对键和值进行清零操作：\n"),t("ul",[t("li",[s._v("对键清零：如果键是指针类型，设置为"),t("code",[s._v("nil")]),s._v("；否则，使用"),t("code",[s._v("typedmemclr")]),s._v("清零。")]),s._v(" "),t("li",[s._v("对值清零：同样地，如果值是指针类型，设置为"),t("code",[s._v("nil")]),s._v("；否则，使用"),t("code",[s._v("typedmemclr")]),s._v("清零。")])])])])]),s._v(" "),t("li",[s._v("更新状态：\n"),t("ul",[t("li",[s._v("将"),t("code",[s._v("count")]),s._v("值减1，表示"),t("code",[s._v("map")]),s._v("中的元素数量减少。")]),s._v(" "),t("li",[s._v("将对应位置的"),t("code",[s._v("tophash")]),s._v("值设置为"),t("code",[s._v("Empty")]),s._v("，标记该位置为空。")])])])]),s._v(" "),t("h2",{attrs:{id:"扩容过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩容过程"}},[s._v("#")]),s._v(" 扩容过程")])])}),[],!1,null,null,null);t.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{447:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"逃逸分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析"}},[s._v("#")]),s._v(" 逃逸分析")]),s._v(" "),t("h2",{attrs:{id:"内存管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[s._v("#")]),s._v(" 内存管理")]),s._v(" "),t("p",[s._v("内存管理包括两个动作：分配和释放。")]),s._v(" "),t("p",[s._v("逃逸分析服务于内存分配，GC负责内存的释放。")]),s._v(" "),t("h2",{attrs:{id:"栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[s._v("#")]),s._v(" 栈")]),s._v(" "),t("p",[s._v("栈是调用栈（call stack）的简称。")]),s._v(" "),t("p",[s._v("在Go语言中，栈的内存是由编译器自动进行分配和释放的，栈区往往存储着函数参数、局部变量和调用函数帧。它们随着函数的创建而分配，随着函数的退出而销毁。")]),s._v(" "),t("p",[s._v("Go应用程序运行时，每个 goroutine 都维护着一个自己的栈区，这个栈区只能自己使用不能被其他 goroutine 使用。")]),s._v(" "),t("p",[s._v("一个栈通常又包含了许多栈帧（stack frame），它描述的是函数之间的调用关系。")]),s._v(" "),t("h2",{attrs:{id:"堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[s._v("#")]),s._v(" 堆")]),s._v(" "),t("p",[s._v("与栈不同的是，堆区的内存一般由编译器和工程师自己共同进行管理分配，交给 Runtime GC 来释放。")]),s._v(" "),t("p",[s._v("在堆上分配时，必须找到一块足够大的内存来存放新的变量数据。后续释放时，垃圾回收器扫描堆空间寻找不再被使用的对象。")]),s._v(" "),t("p",[s._v("我们可以简单理解为：我们用GO语言开发过程中，要考虑的内存管理只是针对"),t("strong",[s._v("堆")]),s._v("内存而言的。")]),s._v(" "),t("p",[s._v("程序在运行期间可以主动从堆上申请内存，这些内存通过Go的内存分配器分配，并由垃圾收集器回收。")]),s._v(" "),t("h2",{attrs:{id:"堆和栈的对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆和栈的对比"}},[s._v("#")]),s._v(" 堆和栈的对比")]),s._v(" "),t("h3",{attrs:{id:"加锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加锁"}},[s._v("#")]),s._v(" 加锁")]),s._v(" "),t("ul",[t("li",[s._v("栈不需要加锁：每个goroutine都独享自己的栈空间，这就意味着栈上的内存操作是不需要加锁的。")]),s._v(" "),t("li",[s._v("堆有时需要加锁：堆上的内存，有时需要加锁防止多线程冲突。Go的内存分配策略学习了TCMalloc的线程缓存思想，他为每个处理器分配了一个mcache，注意：从mcache分配内存也是无锁的。")])]),s._v(" "),t("h3",{attrs:{id:"性能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[s._v("#")]),s._v(" 性能")]),s._v(" "),t("ul",[t("li",[s._v("栈内存管理 性能好：栈上的内存，它的分配与释放非常高效的。简单地说，它只需要两个CPU指令：一个是分配入栈，另外一个是栈内释放。只需要借助于栈相关寄存器即可完成。")]),s._v(" "),t("li",[s._v("堆内存管理 性能差：对于程序堆上的内存回收，还需要有标记清除阶段，例如Go采用的三色标记法。")])]),s._v(" "),t("h3",{attrs:{id:"缓存策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略"}},[s._v("#")]),s._v(" 缓存策略")]),s._v(" "),t("p",[s._v("栈缓存性能更好，堆缓存性能较差。")]),s._v(" "),t("p",[s._v("原因是：栈内存能更好地利用CPU的缓存策略，因为栈空间相较于堆来说是更连续的。")]),s._v(" "),t("h3",{attrs:{id:"省流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#省流"}},[s._v("#")]),s._v(" 省流")]),s._v(" "),t("p",[s._v("为了高效利用内存，所以搞了两个地方优化分配。")]),s._v(" "),t("h2",{attrs:{id:"逃逸分析原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析原理"}},[s._v("#")]),s._v(" 逃逸分析原理")]),s._v(" "),t("p",[s._v("相比于把内存分配到堆中，分配到栈中优势更明显。go明显也是这么想的，所以分配在栈上的多。")]),s._v(" "),t("p",[s._v("但是，在函数返回后无法证明变量未被引用，则该变量将被分配到堆上，该变量不随函数栈的回收而回收。以此避免悬挂指针（dangling pointer）的问题。另外局部变量占用内存很大，也会分配到堆上。")]),s._v(" "),t("blockquote",[t("p",[s._v("那么，go如何确定内存分配到栈上还是堆上呢？")])]),s._v(" "),t("p",[s._v("逃逸分析的基本思想如下：检查变量的生命周期是否是完全可知的，如果通过检查，则在栈上分配。否则，就是所谓的逃逸，必须在堆上进行分配。")]),s._v(" "),t("h3",{attrs:{id:"逃逸分析参考原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析参考原则"}},[s._v("#")]),s._v(" 逃逸分析参考原则")]),s._v(" "),t("ul",[t("li",[s._v("不同于JAVA JVM的运行时逃逸分析，Go的逃逸分析是在编译期完成的：编译期无法确定的参数类型必定放到堆中")]),s._v(" "),t("li",[s._v("如果变量在函数外部存在引用，则必定放在堆中")]),s._v(" "),t("li",[s._v("如果变量占用内存较大时，则优先放到堆中")]),s._v(" "),t("li",[s._v("如果变量在函数外部没有引用，则优先放到栈中")])]),s._v(" "),t("h3",{attrs:{id:"逃逸分析举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析举例"}},[s._v("#")]),s._v(" 逃逸分析举例")]),s._v(" "),t("p",[s._v("命令"),t("code",[s._v("go build -gcflags '-m -m -l' xxx.go")])]),s._v(" "),t("p",[s._v("这个命令是用于构建一个名为testBig.go的Go源代码文件，并使用一些特定的编译器标志。")]),s._v(" "),t("p",[s._v("具体来说，命令的含义如下：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("go build")]),s._v("：构建命令，用于编译和构建Go程序。")]),s._v(" "),t("li",[t("code",[s._v("-gcflags")]),s._v("：编译器标志，用于传递给Go编译器的参数。")]),s._v(" "),t("li",[t("code",[s._v("'-m -m -l'")]),s._v("：传递给编译器的参数，含义如下:\n"),t("ul",[t("li",[t("code",[s._v("-m")]),s._v("：用于启用编译器的详细输出（verbose mode）。编译器会输出更多的信息，包括优化和内联的详细过程。两个"),t("code",[s._v("-m")]),s._v("看到信息更多。")]),s._v(" "),t("li",[t("code",[s._v("-l")]),s._v("：用于禁用函数内联优化。函数内联是一种编译器优化技术，可以将函数调用替换为函数体的直接执行，以减少函数调用的开销。使用"),t("code",[s._v("-l")]),s._v("标志可以禁用这种优化，保留函数调用。")])])])]),s._v(" "),t("h4",{attrs:{id:"_1-参数是接口类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-参数是接口类型"}},[s._v("#")]),s._v(" 1.参数是接口类型")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aaa"')]),s._v("\n    fmt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("Println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:14: b escapes to heap:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:14:   flow: {storage for ... argument} = &{storage for b}:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:14:     from b (spill) at ./testGo.go:7:14")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:14:     from ... argument (slice-literal-element) at ./testGo.go:7:13")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:14:   flow: {heap} = {storage for ... argument}:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:14:     from ... argument (spill) at ./testGo.go:7:13")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:14:     from fmt.Println(... argument...) (call parameter) at ./testGo.go:7:13")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:13: ... argument does not escape")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testGo.go:7:14: b escapes to heap")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("因为Println(a ...interface{})的参数是interface{}类型，编译期无法确定其具体的参数类型，所以内存分配到堆中")]),s._v(" "),t("h4",{attrs:{id:"_2-变量在函数外部有引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量在函数外部有引用"}},[s._v("#")]),s._v(" 2.变量在函数外部有引用")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("a\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("_")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("test")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVar.go:4:2: a escapes to heap:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVar.go:4:2:   flow: ~r0 = &a:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVar.go:4:2:     from &a (address-of) at ./testVar.go:5:9")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVar.go:4:2:     from return &a (return) at ./testVar.go:5:2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVar.go:4:2: moved to heap: a")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[s._v("变量a在函数外部存在引用。")]),s._v(" "),t("p",[s._v("分析一下执行过程：当函数执行完毕，对应的栈帧就被销毁，但是引用已经被返回到函数之外。如果这时外部通过引用地址取值，虽然地址还在，但是这块内存已经被释放回收了，这就是非法内存。这种情况下变量内存分配必须到堆上。")]),s._v(" "),t("h4",{attrs:{id:"_3-变量内存占用较大"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-变量内存占用较大"}},[s._v("#")]),s._v(" 3.变量内存占用较大")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testBig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testSmall")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testBig")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testSmall")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testBig.go:4:11: make([]int, 10000) escapes to heap:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testBig.go:4:11:   flow: {heap} = &{storage for make([]int, 10000)}:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testBig.go:4:11:     from make([]int, 10000) (too large for stack) at ./testBig.go:4:11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testBig.go:4:11: make([]int, 10000) escapes to heap")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testBig.go:11:11: make([]int, 1) does not escape")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[t("code",[s._v("too large for stack")]),s._v("，变量占用内存较大时，会发生逃逸分析，将内存分配到堆上。")]),s._v(" "),t("h4",{attrs:{id:"_4-变量大小不确定时"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-变量大小不确定时"}},[s._v("#")]),s._v(" 4.变量大小不确定时")]),s._v(" "),t("div",{staticClass:"language-go line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-go"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testVarUnsure")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("func")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("testVarUnsure")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVarUnsure.go:5:11: make([]int, l, l) escapes to heap:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVarUnsure.go:5:11:   flow: {heap} = &{storage for make([]int, l, l)}:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVarUnsure.go:5:11:     from make([]int, l, l) (non-constant size) at ./testVarUnsure.go:5:11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// ./testVarUnsure.go:5:11: make([]int, l, l) escapes to heap")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[s._v("我们虽然在代码段中给变量 l 赋值了1，但是编译期间只能识别到初始化int类型切片时，传入的长度和容量是变量l，编译期并不能确定变量l的值，所以发生了逃逸，会把内存分配到堆中。")]),s._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("有些场景下我们不应该传递结构体指针，而应该直接传递结构体。")]),s._v(" "),t("p",[s._v("为什么会这样呢？虽然直接传递结构体需要值拷贝，但是这是在栈上完成的操作，开销远比变量逃逸后动态地在堆上分配内存少的多。")]),s._v(" "),t("p",[s._v("当然这种做法不是绝对的，要根据场景去分析：")]),s._v(" "),t("ul",[t("li",[s._v("如果结构体较大，传递结构体指针更合适，因为指针类型相比值类型能节省大量的内存空间")]),s._v(" "),t("li",[s._v("如果结构体较小，传递结构体更适合，因为在栈上分配内存，可以有效减少GC压力")])])])}),[],!1,null,null,null);t.default=e.exports}}]);
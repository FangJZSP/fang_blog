(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{463:function(a,_,v){"use strict";v.r(_);var t=v(2),s=Object(t.a)({},(function(){var a=this,_=a._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"微服务保护和分布式事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务保护和分布式事务"}},[a._v("#")]),a._v(" 微服务保护和分布式事务")]),a._v(" "),_("h2",{attrs:{id:"雪崩问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#雪崩问题"}},[a._v("#")]),a._v(" 雪崩问题")]),a._v(" "),_("h3",{attrs:{id:"原因分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原因分析"}},[a._v("#")]),a._v(" 原因分析")]),a._v(" "),_("p",[a._v("微服务调用链路中的某个服务故障，引起整个链路中的所有微服务都不可用，这就是雪崩。")]),a._v(" "),_("p",[a._v("开始一片小雪花，后面滚成大雪球。")]),a._v(" "),_("ul",[_("li",[a._v("相关调用异常")]),a._v(" "),_("li",[a._v("异常处理")]),a._v(" "),_("li",[a._v("级联失败")])]),a._v(" "),_("p",[a._v("解决思路：")]),a._v(" "),_("ul",[_("li",[a._v("代码健壮性")]),a._v(" "),_("li",[a._v("网络畅通")]),a._v(" "),_("li",[a._v("较高的并发请求")]),a._v(" "),_("li",[a._v("后备方案")])]),a._v(" "),_("h3",{attrs:{id:"解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[a._v("#")]),a._v(" 解决方案")]),a._v(" "),_("p",[a._v("保护方案：")]),a._v(" "),_("ul",[_("li",[a._v("请求限流\n"),_("ul",[_("li",[a._v("限制流量在可处理范围内")])])]),a._v(" "),_("li",[a._v("线程隔离\n"),_("ul",[_("li",[a._v("控制业务可用的线程数量")]),a._v(" "),_("li",[a._v("信号量？ 有人提了一下")])])]),a._v(" "),_("li",[a._v("服务熔断\n"),_("ul",[_("li",[a._v("断路器统计请求的异常比例或慢调用比例，超出阈值则会熔断该业务，拦截该接口的请求")]),a._v(" "),_("li",[a._v("熔断期间，所有请求快速失败，都走fallback")])])])]),a._v(" "),_("h2",{attrs:{id:"sentinel"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#sentinel"}},[a._v("#")]),a._v(" Sentinel")]),a._v(" "),_("h3",{attrs:{id:"快速入门"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#快速入门"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),_("h4",{attrs:{id:"安装"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[a._v("#")]),a._v(" 安装")]),a._v(" "),_("ul",[_("li",[a._v("安装控制台")]),a._v(" "),_("li",[a._v("运行")])]),a._v(" "),_("h4",{attrs:{id:"微服务整合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务整合"}},[a._v("#")]),a._v(" 微服务整合")]),a._v(" "),_("ul",[_("li",[a._v("引入依赖")]),a._v(" "),_("li",[a._v("配置文件")]),a._v(" "),_("li",[a._v("查看控制台")])]),a._v(" "),_("p",[a._v("实时监控接口调用的逻辑")]),a._v(" "),_("p",[a._v("看一下控制台，有许多方法可以配置")]),a._v(" "),_("p",[a._v("簇点名称，根据请求路径进行区分，还是继续配置文件")]),a._v(" "),_("h3",{attrs:{id:"请求限流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#请求限流"}},[a._v("#")]),a._v(" 请求限流")]),a._v(" "),_("p",[a._v("在簇点链路后面点击流控按钮，既可以对其做限流配置～")]),a._v(" "),_("p",[a._v("限制qps")]),a._v(" "),_("ul",[_("li",[a._v("资源")]),a._v(" "),_("li",[a._v("来源")]),a._v(" "),_("li",[a._v("阈值类型为QPS")]),a._v(" "),_("li",[a._v("单机阈值")]),a._v(" "),_("li",[a._v("是否集群")])]),a._v(" "),_("h4",{attrs:{id:"安装jmeter"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安装jmeter"}},[a._v("#")]),a._v(" 安装Jmeter")]),a._v(" "),_("p",[a._v("启动，进行压测")]),a._v(" "),_("p",[a._v("429 状态码 -> 限流")]),a._v(" "),_("h3",{attrs:{id:"线程隔离"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程隔离"}},[a._v("#")]),a._v(" 线程隔离")]),a._v(" "),_("p",[a._v("当a服务出现阻塞或故障时，调用a服务的b服务可能因此而被拖慢，甚至资源耗尽。所以必须限制b服\n务中查询a中某个异常业务的可用线程数，实现线程隔离。")]),a._v(" "),_("p",[a._v("阈值类型为并发线程数 -> 5个并发线程，如果单线程QPS为2，则5线程QPS为10")]),a._v(" "),_("h4",{attrs:{id:"配置tomcat"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置tomcat"}},[a._v("#")]),a._v(" 配置TomCat")]),a._v(" "),_("p",[a._v("最大线程数，容纳数，最大连接数")]),a._v(" "),_("p",[a._v("发起请求，通过线程隔离，a服务的查询有上限，保护了b服务不会被a服务拖累。")]),a._v(" "),_("p",[a._v("最终完成了对a重要服务的保护。")]),a._v(" "),_("h3",{attrs:{id:"fallback"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#fallback"}},[a._v("#")]),a._v(" Fallback")]),a._v(" "),_("ol",[_("li",[a._v("将FeignClinet作为Sentinel的簇点资源")]),a._v(" "),_("li",[a._v("Fallback有两种配置方式:")])]),a._v(" "),_("ul",[_("li",[a._v("fallbackClass 不可对远程调用异常做处理")]),a._v(" "),_("li",[a._v("fallbackFactory 可处理")])]),a._v(" "),_("h4",{attrs:{id:"如何写"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何写"}},[a._v("#")]),a._v(" 如何写")]),a._v(" "),_("p",[a._v("远程调用都在api包下，xxxFactory去实现FallbackFactory接口，泛型为xxxClient，并完成对应方法的重写。")]),a._v(" "),_("p",[a._v("然后注册这个类，defaultConfig。")]),a._v(" "),_("p",[a._v("并在需求使用的xxxClient类上对@FeignClient进行配置。")]),a._v(" "),_("p",[a._v("可以对某一个服务的调用做限流规则。")]),a._v(" "),_("h3",{attrs:{id:"服务熔断"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断"}},[a._v("#")]),a._v(" 服务熔断")]),a._v(" "),_("p",[a._v("熔断是解决雪崩问题的重要手段。思路是由断路器统计服务调用的异常比例、慢请求比例，如果超出阈值则会熔断该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。")]),a._v(" "),_("h4",{attrs:{id:"配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[a._v("#")]),a._v(" 配置")]),a._v(" "),_("p",[a._v("点击控制台中簇点资源后的熔断按钮，即可配置熔断策略。")]),a._v(" "),_("p",[a._v("知道服务有问题，直接快速fallback，降低资源的损耗。")]),a._v(" "),_("h2",{attrs:{id:"分布式事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[a._v("#")]),a._v(" 分布式事务")]),a._v(" "),_("p",[a._v("分布式的情况下，某一事物无法保证ACID。")]),a._v(" "),_("h3",{attrs:{id:"什么是分布式事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是分布式事务"}},[a._v("#")]),a._v(" 什么是分布式事务")]),a._v(" "),_("p",[a._v("在分布式系统中，如果一个业务需要多个服务合作完成，而且每一个服务都有事务，多个事务必须同时成功或失败，这样的事务就是分布式事务。其中的每个服务的事务就是一个分支事务。整个业务称为全局事务。")]),a._v(" "),_("h3",{attrs:{id:"seata架构和原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#seata架构和原理"}},[a._v("#")]),a._v(" Seata架构和原理")]),a._v(" "),_("h4",{attrs:{id:"分布式事务解决思路"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务解决思路"}},[a._v("#")]),a._v(" 分布式事务解决思路")]),a._v(" "),_("p",[a._v("解决分布式事务，各个子事务之问必须能感知到彼此的事务状态，才能保证状态一致。")]),a._v(" "),_("p",[a._v("加一层 事务协调者。（没有什么事情是加一层不能解决的）")]),a._v(" "),_("h4",{attrs:{id:"seata架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#seata架构"}},[a._v("#")]),a._v(" Seata架构")]),a._v(" "),_("ul",[_("li",[a._v("TC (Transaction Coordinator)-事务协调者：维护全局和分支事务的状态，协调全局事务提交或回滚。")]),a._v(" "),_("li",[a._v("TM (Transaction Manager)-事务管理器：定义全局事务的范国、开始全局事务、提交或回滚全局事务。")]),a._v(" "),_("li",[a._v("RM (Resource Manager)-资源管理器：管理分支事务，与TC交谈以注册分支事务和报告分支事务的状态。")])]),a._v(" "),_("h3",{attrs:{id:"部署tc服务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#部署tc服务"}},[a._v("#")]),a._v(" 部署TC服务")]),a._v(" "),_("ol",[_("li",[a._v("准备数据库表")]),a._v(" "),_("li",[a._v("准备配置文件（讲解了一下响应的yml文件：端口/服务/存储……）")]),a._v(" "),_("li",[a._v("Docker部署（网桥保证是一起的）")])]),a._v(" "),_("p",[a._v("成功之后可以根据端口打开Seata的控制台")]),a._v(" "),_("h3",{attrs:{id:"微服务整合seata"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务整合seata"}},[a._v("#")]),a._v(" 微服务整合Seata")]),a._v(" "),_("ol",[_("li",[a._v("引入依赖")]),a._v(" "),_("li",[a._v("在application中添加配置，微服务中找到TC服务地址")])]),a._v(" "),_("blockquote",[_("p",[a._v("nacos共享配置，简化yml文件，看样子要多看看即便"),_("strong",[a._v("5_配置管理")]),a._v("了")])]),a._v(" "),_("h3",{attrs:{id:"xa模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xa模式"}},[a._v("#")]),a._v(" XA模式")]),a._v(" "),_("p",[a._v("XA规范 是x/Open 组织定义的分布式事务处理 (DTP, Distributed Transaction Processing)标准，XA 规范描述了全局的\nTM与局部的RM之间的接口，几乎所有主流的关系型数据库都对 XA 规范提供了支持。")]),a._v(" "),_("h4",{attrs:{id:"一阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一阶段"}},[a._v("#")]),a._v(" 一阶段")]),a._v(" "),_("p",[a._v("一阶段的工作：\n① RM注册分支事务到TC\n② RM执行分支业务sql但不提交\n③ RM报告执行状态到TC")]),a._v(" "),_("h4",{attrs:{id:"二阶段"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二阶段"}},[a._v("#")]),a._v(" 二阶段")]),a._v(" "),_("ul",[_("li",[a._v("TC检测各分支事务执行状态\n"),_("ul",[_("li",[a._v("如果都成功，通知所有RM提交事务")]),a._v(" "),_("li",[a._v("如果有失败，通知所有RM回滚事务")])])]),a._v(" "),_("li",[a._v("RM接收TC指令，提交或回滚事务")])]),a._v(" "),_("h4",{attrs:{id:"xt优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xt优缺点"}},[a._v("#")]),a._v(" XT优缺点")]),a._v(" "),_("p",[a._v("XA模式的优点是什么")]),a._v(" "),_("ul",[_("li",[a._v("事务的强一致性，满足ACID原則。")]),a._v(" "),_("li",[a._v("常用数据库都支持，安现简单，井且没有代码侵入")])]),a._v(" "),_("p",[a._v("XA模式的缺点是什么？")]),a._v(" "),_("ul",[_("li",[a._v("因为一阶段两要锁定数据库资源，等待二阶段结束才釋放，性能蚊差")]),a._v(" "),_("li",[a._v("依赖关系型数据库实现事务")])]),a._v(" "),_("h4",{attrs:{id:"实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[a._v("#")]),a._v(" 实现")]),a._v(" "),_("ol",[_("li",[a._v("修改配置文件（参与事务的微服务）")]),a._v(" "),_("li",[a._v("在发起全局事务的入口方法添加全局事务注解")]),a._v(" "),_("li",[a._v("重启服务（测试下单->购物车删除->创建订单->扣减库存，当扣减库存失败，二阶段整个事务进行回滚）")])]),a._v(" "),_("h3",{attrs:{id:"at模式原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#at模式原理"}},[a._v("#")]),a._v(" AT模式原理")]),a._v(" "),_("p",[a._v("Seata主推的是AT模式，AT模式同样是分阶段提交的事务模型，不过缺弥补了XA模型中资源锁定周期过长的缺陷。")]),a._v(" "),_("h4",{attrs:{id:"过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[a._v("#")]),a._v(" 过程")]),a._v(" "),_("h5",{attrs:{id:"阶段一"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#阶段一"}},[a._v("#")]),a._v(" 阶段一")]),a._v(" "),_("p",[a._v("RM工作")]),a._v(" "),_("ul",[_("li",[a._v("注册分支事务")]),a._v(" "),_("li",[a._v("记录undo-log（数据快照）")]),a._v(" "),_("li",[a._v("执行业务sql并提交")]),a._v(" "),_("li",[a._v("报告事务状态")])]),a._v(" "),_("h5",{attrs:{id:"阶段二"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#阶段二"}},[a._v("#")]),a._v(" 阶段二")]),a._v(" "),_("p",[a._v("提交时RM的工作：")]),a._v(" "),_("ul",[_("li",[a._v("删除undo-log即可")])]),a._v(" "),_("p",[a._v("回滚时RM的工作：")]),a._v(" "),_("ul",[_("li",[a._v("根据undo-log恢复数据到更新前")])]),a._v(" "),_("h4",{attrs:{id:"at和xt的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#at和xt的区别"}},[a._v("#")]),a._v(" AT和XT的区别")]),a._v(" "),_("ul",[_("li",[a._v("XA模式一阶段不提交事务，锁定资源;AT模式一阶段直接提交，不锁定资源。")]),a._v(" "),_("li",[a._v("XA模式依赖数据库机制实现回滚;AT模式利用数据快照实\n现数据回滚。")]),a._v(" "),_("li",[a._v("XA模式强一致；AT模式最终一致")])]),a._v(" "),_("p",[a._v("看到有个弹幕很有意思 -> 就是你抢到票了，最后也给你退了～")]),a._v(" "),_("h3",{attrs:{id:"at模式使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#at模式使用"}},[a._v("#")]),a._v(" AT模式使用")]),a._v(" "),_("ol",[_("li",[a._v("给每个微服务添加一张undo_log表")]),a._v(" "),_("li",[a._v("修改配置文件，事务模式修改为AT模式")])])])}),[],!1,null,null,null);_.default=s.exports}}]);
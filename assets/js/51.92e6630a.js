(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{462:function(a,t,s){"use strict";s.r(t);var v=s(2),e=Object(v.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"mq入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mq入门"}},[a._v("#")]),a._v(" MQ入门")]),a._v(" "),t("h2",{attrs:{id:"初识mq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初识mq"}},[a._v("#")]),a._v(" 初识MQ")]),a._v(" "),t("h3",{attrs:{id:"同步调用优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同步调用优缺点"}},[a._v("#")]),a._v(" 同步调用优缺点")]),a._v(" "),t("h4",{attrs:{id:"以支付业务为例-同步调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#以支付业务为例-同步调用"}},[a._v("#")]),a._v(" 以支付业务为例（同步调用～）")]),a._v(" "),t("p",[a._v("支付业务 核心 只是更新支付状态：")]),a._v(" "),t("ol",[t("li",[a._v("（用户服务）扣减余额")]),a._v(" "),t("li",[a._v("更新支付状态")]),a._v(" "),t("li",[a._v("（交易服务）更新订单状态")]),a._v(" "),t("li",[a._v("（通知服务）短信通知用户")]),a._v(" "),t("li",[a._v("（积分业务）增加用户积分")])]),a._v(" "),t("h5",{attrs:{id:"同步调用的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同步调用的缺点"}},[a._v("#")]),a._v(" 同步调用的缺点")]),a._v(" "),t("p",[a._v("优：")]),a._v(" "),t("ul",[t("li",[a._v("时效性强")])]),a._v(" "),t("p",[a._v("缺：")]),a._v(" "),t("ul",[t("li",[a._v("拓展性差")]),a._v(" "),t("li",[a._v("性能下降")]),a._v(" "),t("li",[a._v("级联失效问题")])]),a._v(" "),t("h4",{attrs:{id:"以支付业务为例-异步调用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#以支付业务为例-异步调用"}},[a._v("#")]),a._v(" 以支付业务为例（异步调用～）")]),a._v(" "),t("p",[a._v("异步调用通常是基于消息通知的方式，包含三个角色：\n• 消息发送者：投递消息的人，就是原来的调用者\n• 消息接收者：接收和处理消息的人，就是原来的服务提供者\n• 消息代理：管理、暂存、转发消息，你可以把它理解成微信服务器")]),a._v(" "),t("p",[a._v("支付业务不在同步调用业务关联度低的服务，而是发送消息通知到Broker。")]),a._v(" "),t("p",[a._v("给消息代理，转发给业务关联度低的服务。")]),a._v(" "),t("ul",[t("li",[a._v("解决了耦合，拓展性强")]),a._v(" "),t("li",[a._v("无需等待，性能好")]),a._v(" "),t("li",[a._v("故障隔离")]),a._v(" "),t("li",[a._v("缓存消息，流量削峰填谷")])]),a._v(" "),t("p",[a._v("问题是：")]),a._v(" "),t("ul",[t("li",[a._v("不能立即得到调用结果，时效性差")]),a._v(" "),t("li",[a._v("不能确定下游业务执行的是否成功")]),a._v(" "),t("li",[a._v("业务安全依赖于Broker（消息代理）的可靠性")])]),a._v(" "),t("h3",{attrs:{id:"技术选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#技术选型"}},[a._v("#")]),a._v(" 技术选型")]),a._v(" "),t("p",[a._v("MQ (MessageQueue)，中文是消息队列，宇面来看就是存放消息的队列。也就是异步调用中的Broker。")]),a._v(" "),t("h3",{attrs:{id:"安装部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装部署"}},[a._v("#")]),a._v(" 安装部署")]),a._v(" "),t("p",[a._v("安装 使用Docker安装并启动RabbitMQ")]),a._v(" "),t("h4",{attrs:{id:"介绍控制台"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍控制台"}},[a._v("#")]),a._v(" 介绍控制台")]),a._v(" "),t("p",[a._v("overview 总览")]),a._v(" "),t("p",[a._v("connections 链接")]),a._v(" "),t("p",[a._v("channel 通道")]),a._v(" "),t("p",[a._v("exchange 交换机")]),a._v(" "),t("p",[a._v("queue 队列")]),a._v(" "),t("p",[a._v("admin 管理员")]),a._v(" "),t("h4",{attrs:{id:"基本介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本介绍"}},[a._v("#")]),a._v(" 基本介绍")]),a._v(" "),t("p",[a._v("RabbitMO的整体架构及核心概念：\n• virtual-host：虛拟主机，起到数据隔离的作用\n• publisher：消息发送者\n• consumer：消息的消费者\n• queue：队列，存储消息\n• exchange：交换机，负责路由消息")]),a._v(" "),t("h3",{attrs:{id:"初识mq快速入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初识mq快速入门"}},[a._v("#")]),a._v(" 初识MQ快速入门")]),a._v(" "),t("ol",[t("li",[a._v("添加队列")]),a._v(" "),t("li",[a._v("交换机为fanout")]),a._v(" "),t("li",[a._v("检查队列是否能收到消息 exchange -> publish message -> 发现没有路由")])]),a._v(" "),t("p",[a._v("交换机可能存在丢失消息，没有存储消息的能力")]),a._v(" "),t("p",[a._v("将队列绑定交换机")]),a._v(" "),t("p",[a._v("publish in -> publish out")]),a._v(" "),t("p",[a._v("这时候消费者可以消费消息了")]),a._v(" "),t("h4",{attrs:{id:"注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[a._v("#")]),a._v(" 注意事项")]),a._v(" "),t("ul",[t("li",[a._v("交换机只能路由消息，无法存储消息")]),a._v(" "),t("li",[a._v("交换机只会路由消息给与其鄉定的队列，因此队列必须与交换机绑定")])]),a._v(" "),t("h3",{attrs:{id:"数据隔离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据隔离"}},[a._v("#")]),a._v(" 数据隔离")]),a._v(" "),t("p",[a._v("任务：测试不同的虚拟主机的数据隔离")]),a._v(" "),t("p",[a._v("添加新用户，添加虚拟主机，和自己的业务相关")]),a._v(" "),t("h2",{attrs:{id:"java客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java客户端"}},[a._v("#")]),a._v(" Java客户端")]),a._v(" "),t("h3",{attrs:{id:"java客户端快速入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java客户端快速入门"}},[a._v("#")]),a._v(" Java客户端快速入门")]),a._v(" "),t("h4",{attrs:{id:"spring-amqp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-amqp"}},[a._v("#")]),a._v(" Spring AMQP")]),a._v(" "),t("p",[a._v("Spring ANQP是基于AMQP协议定义的一套API规范，提供了模板来发送和接收消息。包含两部分，其中spring amqp是基础抽象，spring-rabbit是底层的默认实现。")]),a._v(" "),t("h4",{attrs:{id:"amqp任务需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amqp任务需求"}},[a._v("#")]),a._v(" amqp任务需求")]),a._v(" "),t("p",[a._v("需求如下：")]),a._v(" "),t("ul",[t("li",[a._v("利用控制台创建队列simple.queue")]),a._v(" "),t("li",[a._v("在publisher服务中，利用SpringAMQP直接向simple.queue发送消息")]),a._v(" "),t("li",[a._v("在consumer服务中，利用SpringAMQP编号消费者，监听simple.queue队列")])]),a._v(" "),t("h4",{attrs:{id:"amqp完成需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#amqp完成需求"}},[a._v("#")]),a._v(" amqp完成需求")]),a._v(" "),t("ol",[t("li",[a._v("引入依赖spring-amqp")]),a._v(" "),t("li",[a._v("配置MQ服务端信息yml文件 主机名/端口/虚拟主机/用户名/密码")]),a._v(" "),t("li",[a._v("发送消息，RabbitTemplate工具类可以发送消息，添加队列名和消息即可")]),a._v(" "),t("li",[a._v("接收消息，SpringAMQP提供声明式的消息监听，我们只需要通过注解在方法上声明要监听的队列名称，将来SpringAMQP就会把消息传递给当前方法")])]),a._v(" "),t("h3",{attrs:{id:"workqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workqueue"}},[a._v("#")]),a._v(" WorkQueue")]),a._v(" "),t("p",[a._v("Work queues，任务模型。简单来说就是让多个消费者绑定到一个队列，共同消费队列中的消息。")]),a._v(" "),t("h4",{attrs:{id:"work-queue任务需求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#work-queue任务需求"}},[a._v("#")]),a._v(" work queue任务需求")]),a._v(" "),t("ol",[t("li",[a._v("在RabbitMQ的控制台创建一个队列，名为work.queue")]),a._v(" "),t("li",[a._v("在publisher服务中定义测试方法，发送50条消息到work.queue")]),a._v(" "),t("li",[a._v("在consumer服务中定义两个消息监听者，都监听work.queue队列")])]),a._v(" "),t("p",[a._v("修改配置文件，preFetch为1，确保同一时刻消费者只能获得一条消息")]),a._v(" "),t("h4",{attrs:{id:"work-queue作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#work-queue作用"}},[a._v("#")]),a._v(" work queue作用")]),a._v(" "),t("p",[a._v("在处理一些在后台运行的耗时任务时，避免立即执行某些资源密集型任务，改为将这些任务加入队列。")]),a._v(" "),t("ol",[t("li",[a._v("平衡负载：在有多个工作者（worker）或消费者（consumer）接收该队列中的消息时，消息会被均匀地分发给每个工作者，所以工作者如果闲置，就可以立即获得待处理的任务。这是有效处理大量任务负载的策略。")]),a._v(" "),t("li",[a._v("消息持久性及应用到达保障：如果RabbitMQ服务器宕机，可以通过将queue及消息都设置为持久化，从而保证消息不丢失。")]),a._v(" "),t("li",[a._v("异步处理任务：应用程序在执行某些复杂操作时，可以将操作加入队列，无需同步等待操作完成。这对于需要长时间运行的任务非常有用，可以在未来的某个时间点完成。")])]),a._v(" "),t("h3",{attrs:{id:"fanout交换机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fanout交换机"}},[a._v("#")]),a._v(" Fanout交换机")]),a._v(" "),t("p",[a._v("广播路由")]),a._v(" "),t("h4",{attrs:{id:"常见交换机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见交换机"}},[a._v("#")]),a._v(" 常见交换机")]),a._v(" "),t("p",[a._v("交换机的作用主要是接收发送者发送的消息，并将消息路由到与其鄉定的队列。")]),a._v(" "),t("p",[a._v("常见交换机的类型有以下三种：\n• Fanout: 广播\n• Direct: 定向\n• Topic: 话题")]),a._v(" "),t("h4",{attrs:{id:"fanout交换机使用场景和作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fanout交换机使用场景和作用"}},[a._v("#")]),a._v(" Fanout交换机使用场景和作用")]),a._v(" "),t("p",[a._v("特点是能够将接收到的消息广播到所有它知道的队列中。")]),a._v(" "),t("ol",[t("li",[a._v("广播消息：因为Fanout交换机会将接收到的消息发送到所有连接的队列，所以它经常被用来在多个消费者之间进行消息的广播。这非常适合于广播通知或日志系统中。")]),a._v(" "),t("li",[a._v("无选择性路由：与Direct交换机和Topic交换机不同，Fanout交换机无法根据路由键（routing key）进行选择性路由。但是，这种方式可以使系统更简单且更快。")]),a._v(" "),t("li",[a._v("快速传播：由于消息需要立即发送到所有队列，所以Fanout交换机通常需要更快的速度。这使得它成为实时系统中的理想选择，这些系统需要尽可能快地通知所有相关队列。")])]),a._v(" "),t("h4",{attrs:{id:"fanout交换机使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fanout交换机使用"}},[a._v("#")]),a._v(" Fanout交换机使用")]),a._v(" "),t("p",[a._v("三个参数的传递")]),a._v(" "),t("h3",{attrs:{id:"direct交换机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#direct交换机"}},[a._v("#")]),a._v(" Direct交换机")]),a._v(" "),t("p",[a._v("定向路由")]),a._v(" "),t("h4",{attrs:{id:"direct交换机使用场景和作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#direct交换机使用场景和作用"}},[a._v("#")]),a._v(" Direct交换机使用场景和作用")]),a._v(" "),t("p",[a._v("主要作用是根据特定的路由键（Routing Key）将消息进行精确的转发或路由。")]),a._v(" "),t("ol",[t("li",[a._v("精确匹配路由：Direct交换机将消息路由到Binding Key（绑定键）与Routing Key（路由键）完全匹配的队列。如果一个队列的绑定键与消息的路由键完全匹配，那么消息就被路由到这个队列。")]),a._v(" "),t("li",[a._v("选择性消息接收：可以利用Direct交换机实现不同的队列订阅不同类型的消息，队列只消费和处理符合其路由规则的消息。")]),a._v(" "),t("li",[a._v("工作队列：Direct交换机可以配合持久化设置建立持久化的工作队列，完成任务的异步处理。")])]),a._v(" "),t("p",[a._v("在设计消息系统时，可以根据路由键的不同将不同的消息发送到不同的队列，使用Direct交换机可以将一个发送者的消息根据一定的规则路由到一个或多个特定的消费者。")]),a._v(" "),t("h3",{attrs:{id:"topic交换机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#topic交换机"}},[a._v("#")]),a._v(" Topic交换机")]),a._v(" "),t("p",[a._v("TopicExChange也是基于Routingkey做消息路由，但是routingkey通常是多个单词的组合，并且以 . 分割。")]),a._v(" "),t("p",[a._v("灵活，拓展性～ 比直接交换机（Direct Exchange）的路由能力更强大，可以实现更为复杂的匹配规则～")]),a._v(" "),t("h4",{attrs:{id:"topic交换机使用场景和作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#topic交换机使用场景和作用"}},[a._v("#")]),a._v(" Topic交换机使用场景和作用")]),a._v(" "),t("p",[a._v("主要功能是将接收到的消息根据路由键，动态地路由到一个或多个队列中。")]),a._v(" "),t("ol",[t("li",[a._v("动态路由（模糊匹配）：Topic交换机支持符号“"),t("em",[a._v("”和“#”，其中“")]),a._v("”表示匹配一个词，“#”表示匹配零个或多个词。即可实现部分匹配，也可实现全字符匹配。")]),a._v(" "),t("li",[a._v("主题订阅：即基于发布-订阅模式，消费者可以订阅一系列符合规则的主题，生产者根据这个主题创建消息，Topic交换机会把这个消息路由给订阅了相应主题的消费者。")]),a._v(" "),t("li",[a._v("多重绑定：一条消息可以路由到多个不同的队列，只要他们的Binding Key与Routing Key匹配即可。")])]),a._v(" "),t("p",[a._v("可以应用在例如消息的分类处理、广播等。")]),a._v(" "),t("h3",{attrs:{id:"基于bean声明队列交换机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于bean声明队列交换机"}},[a._v("#")]),a._v(" 基于Bean声明队列交换机")]),a._v(" "),t("p",[a._v("SpringAMQP提供了几个类，用来声明队列、交换机及其鄉定关系：\n•Queue：用于声明队列，可以用工厂类QueueBuilder构建\n•Exchange：用于声明交换机，可以用工厂类ExchangeBuilder构建\n•Binding：用于声明队列和交换机的鄉定关系，可以用工厂类BindingBuilder构建")]),a._v(" "),t("h4",{attrs:{id:"代码实现队列交换机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码实现队列交换机"}},[a._v("#")]),a._v(" 代码实现队列交换机")]),a._v(" "),t("ol",[t("li",[a._v("声明一个FanoutExchange交换机")]),a._v(" "),t("li",[a._v("声明一个队列")]),a._v(" "),t("li",[a._v("绑定队列1和交换机")]),a._v(" "),t("li",[a._v("以相同的方式声明第二个队列并完成绑定")]),a._v(" "),t("li",[a._v("……")])]),a._v(" "),t("h3",{attrs:{id:"基于注解声明队列交换机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基于注解声明队列交换机"}},[a._v("#")]),a._v(" 基于注解声明队列交换机")]),a._v(" "),t("p",[a._v("上面基于Bean的可能会有问题，只能指定一个key， 要不停的加代码，太烦人了？ 有没有可以简化的办法呢？")]),a._v(" "),t("h4",{attrs:{id:"提供了-rabbitlistener注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提供了-rabbitlistener注解"}},[a._v("#")]),a._v(" 提供了@RabbitListener注解")]),a._v(" "),t("p",[a._v("我们只需要把bindings（ value exchange key ）这些配置一下就可以了")]),a._v(" "),t("h3",{attrs:{id:"消息转换器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息转换器"}},[a._v("#")]),a._v(" 消息转换器")]),a._v(" "),t("p",[a._v("提前猜测提这个概念是 -> 因为对象的序列化和反序列化，因为对象没有办法直接通过消息传输")]),a._v(" "),t("p",[a._v("JDK自带的序列化方式，对对象进行了序列化。很复杂一长串～")]),a._v(" "),t("h4",{attrs:{id:"jdk序列化的弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk序列化的弊端"}},[a._v("#")]),a._v(" JDK序列化的弊端")]),a._v(" "),t("p",[a._v("Spring的对消息对象的处理是由org.springframework.amqp.support.converter.Messageconverter来处理的。而\n默认实现是SimpleMessageconverter，基刊JDK的Objectoutputstream完成序列化。\n存在下列问题：")]),a._v(" "),t("ul",[t("li",[a._v("JDk的序列化有安全风险")]),a._v(" "),t("li",[a._v("JDK序列化的消息太大")]),a._v(" "),t("li",[a._v("JDK序列化的消息可读性差")])]),a._v(" "),t("h4",{attrs:{id:"引入jackson依赖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引入jackson依赖"}},[a._v("#")]),a._v(" 引入Jackson依赖")]),a._v(" "),t("p",[a._v("建议采用JSON序列化代替默认的JDK序列化")]),a._v(" "),t("div",{staticClass:"language-Java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 配置在启动类里即可")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Bean")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MessageConverter")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("jacksonMessageConvertor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Jackson2JsonMessageConverter")]),a._v(" jackson2JsonMessageConverter "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Jackson2JsonMessageConverter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        jackson2JsonMessageConverter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("setCreateMessageIds")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" jackson2JsonMessageConverter"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br")])]),t("h3",{attrs:{id:"业务改造"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务改造"}},[a._v("#")]),a._v(" 业务改造")]),a._v(" "),t("p",[a._v("不在同步调用交易服务的openFeign接口，而是采用异步MQ通知交易服务～")]),a._v(" "),t("p",[a._v("最后修改一下，代码完成本章节啦～")])])}),[],!1,null,null,null);t.default=e.exports}}]);
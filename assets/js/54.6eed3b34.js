(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{465:function(t,a,s){"use strict";s.r(a);var o=s(2),r=Object(o.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java注解"}},[t._v("#")]),t._v(" Java注解")]),t._v(" "),a("h2",{attrs:{id:"postconstruct"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#postconstruct"}},[t._v("#")]),t._v(" @PostConstruct")]),t._v(" "),a("p",[t._v("@PostConstruct 是一个 Java EE 5（及之后版本）和 Java SE 5（通过 Java EE 引入）中的注解，它用于在依赖注入完成后，立即在构造函数之后，但在任何方法被调用之前，自动执行一个方法。这个注解通常用于执行一些初始化任务，如数据加载、资源分配、系统配置或安全性检查。")]),t._v(" "),a("p",[t._v("@PostConstruct 注解的方法通常具有以下特点：")]),t._v(" "),a("ul",[a("li",[t._v("无参数：@PostConstruct 注解的方法不应该有任何参数。")]),t._v(" "),a("li",[t._v("返回 void：该方法不应该有任何返回值。")]),t._v(" "),a("li",[t._v("非静态：该方法不应该是静态的。")]),t._v(" "),a("li",[t._v("访问权限：虽然它可以是私有的（private），但通常建议将其设置为受保护的（protected）或公共的（public），以便子类可以覆盖它（如果需要）。")]),t._v(" "),a("li",[t._v("只有一个：一个类只能有一个方法被 @PostConstruct 注解。")])]),t._v(" "),a("p",[t._v("这个注解通常用于由依赖注入容器（如Spring或Java EE容器）管理的Bean。当Bean被实例化并且其所有依赖项都已经被注入之后，@PostConstruct 注解的方法就会被自动调用。")])])}),[],!1,null,null,null);a.default=r.exports}}]);
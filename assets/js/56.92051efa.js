(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{470:function(v,_,t){"use strict";t.r(_);var a=t(2),s=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h3",{attrs:{id:"掌握技术"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#掌握技术"}},[v._v("#")]),v._v(" 掌握技术")]),v._v(" "),_("hr"),v._v(" "),_("ul",[_("li",[v._v("熟练使用"),_("strong",[v._v("Javase")]),v._v("，掌握集合、多线程、并发等概念，具有良好的编码习惯和面向对象思想。")]),v._v(" "),_("li",[v._v("熟练使用"),_("strong",[v._v("Spring")]),v._v("，"),_("strong",[v._v("SpringMVC")]),v._v("，"),_("strong",[v._v("Mybaits")]),v._v("，"),_("strong",[v._v("MybatisPlus")]),v._v("等主流开发框架。")]),v._v(" "),_("li",[v._v("熟练使用"),_("strong",[v._v("MySQL")]),v._v("，了解索引、事务实现机制，可以根据需求进行SQL优化。")]),v._v(" "),_("li",[v._v("熟练使用非关系型数据库"),_("strong",[v._v("Redis")]),v._v("，使用Redis缓存技术对项目进行优化，了解缓存雪崩，缓存穿透，缓存击穿的解决方案，了解Redisson分布式锁的实现原理。")]),v._v(" "),_("li",[v._v("了解"),_("strong",[v._v("SpringCloud")]),v._v("微服务框架，如：Nacos、GateWay、Fegin、Ribbon、Sentinel。")]),v._v(" "),_("li",[v._v("了解"),_("strong",[v._v("linux")]),v._v("命令，使用镜像CentOS7搭建虚拟机，掌握Finalshell远程服务连接工具。")]),v._v(" "),_("li",[v._v("了解"),_("strong",[v._v("Docker")]),v._v("基本使用和命令，部署常用软件。")]),v._v(" "),_("li",[v._v("了解"),_("strong",[v._v("Nginx")]),v._v("服务器， 能够搭建基于Nginx负载均衡，反向代理。")]),v._v(" "),_("li",[v._v("了解"),_("strong",[v._v("ElasticSearch")]),v._v("全文检索技术，"),_("strong",[v._v("RibbitMQ")]),v._v("消息中间件，了解其使用场景。")]),v._v(" "),_("li",[v._v("了解"),_("strong",[v._v("HTML")]),v._v("，"),_("strong",[v._v("CSS")]),v._v("，"),_("strong",[v._v("JS")]),v._v("，"),_("strong",[v._v("AJAX")]),v._v("，"),_("strong",[v._v("VUE")]),v._v("和"),_("strong",[v._v("Element-ui")]),v._v("的常规使用。")]),v._v(" "),_("li",[v._v("掌握"),_("strong",[v._v("IDEA")]),v._v("，"),_("strong",[v._v("VSCode")]),v._v("，"),_("strong",[v._v("Maven")]),v._v("，"),_("strong",[v._v("NaviCat")]),v._v("，"),_("strong",[v._v("PostMan")]),v._v("，"),_("strong",[v._v("Git")]),v._v("等开发常用工具。")])]),v._v(" "),_("h3",{attrs:{id:"javase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#javase"}},[v._v("#")]),v._v(" Javase")]),v._v(" "),_("h4",{attrs:{id:"集合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#集合"}},[v._v("#")]),v._v(" 集合")]),v._v(" "),_("h5",{attrs:{id:"泛谈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#泛谈"}},[v._v("#")]),v._v(" 泛谈")]),v._v(" "),_("h6",{attrs:{id:"面-说说你对集合的了解吧"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-说说你对集合的了解吧"}},[v._v("#")]),v._v(" 面：说说你对集合的了解吧")]),v._v(" "),_("p",[v._v("我：面试官你好，我简单说一下我对集合框架的理解。集合它分为两种，一种是单列集合connection，一种是双列集合map。")]),v._v(" "),_("p",[v._v("那么connection它有两个子接口，一个是list，还有这个set。list是有序可重复的，set是无序且唯一的。")]),v._v(" "),_("p",[v._v("对于list它也有三个子接口，第一个子接口是vector，它是数组结构，它也是这个线程安全的，我们这里线程安全一般说的是它的方法上有这个synchronize这个锁的。那么ArrayList呢，它也是数组结构，是非线程安全的。还有这个linkedlist它是个双向链表结构，非线程安全的。")]),v._v(" "),_("p",[v._v("对于set呢，它有两个子接口，第一个是hashset，hash表结构，它是基于hash算法的一种结构，它还有一个实现类，就是linkedhash\nset，它是哈希表和链表的一种结构。第二个子接口set就是treeset，它是红黑数结构。")]),v._v(" "),_("p",[v._v("对于双列集合map来说，它有四种实现类，第一个是hashtable，hash表结构，线程安全的。那么但是hashtable，它现在已经很少用了，因为它的这个性能比较差，它的一个子接口properties还会做配置文件存储。第二个是hashmap，它是一种哈希表结构，是非线程安全的，它有一个实现类，也是这个linkdhashmap，它是哈希表和链表结构。第三个比较常用的有这个concurrenthashmap，它是哈希表结构，线程安全。另外最后一种的就是treemap，红黑树结构。")]),v._v(" "),_("h5",{attrs:{id:"挖深"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#挖深"}},[v._v("#")]),v._v(" 挖深")]),v._v(" "),_("h6",{attrs:{id:"面-深讲一下arraylist"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-深讲一下arraylist"}},[v._v("#")]),v._v(" 面：深讲一下arraylist")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("arraylist中维护了一个object类型的数组，elementdata transient object[] elementdata; transient 表示瞬间，短暂的，表示该属性不会被序列化")])]),v._v(" "),_("li",[_("p",[v._v("允许所有元素加入，arraylist可以加入null 并且多个")])]),v._v(" "),_("li",[_("p",[v._v("ArrayList基本等同于vector，除了arraylist是线程不安全（执行效率高），在多线程情况下，不建议使用ArrayList")])]),v._v(" "),_("li",[_("p",[v._v("当创建ArrayList对象时，如果使用的是无参构造器，则初始elementdata容量为0，第一次添加，则扩容elementData 为\n10，如需要再次扩容，则扩容elementdata为1.5倍")])]),v._v(" "),_("li",[_("p",[v._v("如果使用的是指定大小的构造器，则初始elementdata容量为指定大小，如果需要扩容，则直接扩容为1.5倍")])]),v._v(" "),_("li")]),v._v(" "),_("p",[v._v("添加逻辑：确保数组已使用长度（size）加1之后足够存下下一个数据计算数组的容量，如果当前数组已使用长度+1后的大于当前的数组长度，则调用grow方法扩容（原来的1.5倍）确保新增的数据有地方存储之后，则将新元素添加到位于size的位置上。返回添加成功布尔值。")]),v._v(" "),_("h6",{attrs:{id:"面-深讲一下linkedlist"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-深讲一下linkedlist"}},[v._v("#")]),v._v(" 面：深讲一下linkedlist")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("linkedlist底层实现了双向链表和双端队列的特点")])]),v._v(" "),_("li",[_("p",[v._v("可以添加任意元素，元素可以重复，包括null")])]),v._v(" "),_("li",[_("p",[v._v("线程不安全，没有实现同步")])]),v._v(" "),_("li",[_("p",[v._v('ps："线程不安全"指的是LinkedList在多线程环境下可能会出现竞争和冲突的情况，导致数据错误或程序崩溃等问题。而"没有实现同步"\n则表示LinkedList类没有加入对线程同步的相关处理，即没有采取措施来避免这些潜在的线程问题。')])])]),v._v(" "),_("h6",{attrs:{id:"面-arraylist和linkedlist区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-arraylist和linkedlist区别"}},[v._v("#")]),v._v(" 面：arraylist和linkedlist区别")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("ArrayList 可变数组 增删较低 数组扩容 改查效率较高")])]),v._v(" "),_("li",[_("p",[v._v("linkedlist 双向链表 增删效率较高 改查效率较低")])])]),v._v(" "),_("h6",{attrs:{id:"面-数组和list如何互相转"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-数组和list如何互相转"}},[v._v("#")]),v._v(" 面：数组和list如何互相转")]),v._v(" "),_("p",[v._v("要将数组转换为List，可以使用Arrays类中的asList()\n方法。该方法将数组转换为List，并返回List的视图，除了添加和删除操作以外，其他操作都可以使用。Arrays.asList转换list之后，如果修改了数组的内容，list会受影响，因为它的底层使用的Arrays类中的一个内部类ArrayList来构造的集合，在这个集合的构造器中，把我们传入的这个集合进行了包装而已，最终指向的都是同一个内存地址。")]),v._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("int")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" array "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("3")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("4")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("List")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Integer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v(" list "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Arrays")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("asList")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("array"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br")])]),_("p",[v._v("要将List转换为数组，可以使用List的toArray()\n方法。该方法将List转换为数组，并且可以指定数组的类型。llist用了toArray转数组后，如果修改了list内容，数组不会影响，当调用了toArray以后，在底层是它是进行了数组的拷贝，跟原来的元素就没啥关系了，所以即使list修改了以后，数组也不受影响")]),v._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("List")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Integer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v(" list "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("ArrayList")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\nlist"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("add")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\nlist"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("add")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\nlist"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("add")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("3")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\nlist"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("add")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("4")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Integer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" array "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" list"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("toArray")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Integer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br")])]),_("p",[v._v("如果数组是基本数据类型，例如int、float等，可以使用Apache Commons Lang库中的ArrayUtils类，它提供了一些实用的方法来转换数组。")]),v._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("int")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" array "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("3")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("4")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("List")]),_("span",{pre:!0,attrs:{class:"token generics"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Integer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v(" list "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Arrays")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("asList")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("ArrayUtils")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("toObject")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("array"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("int")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" newArray "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("ArrayUtils")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("toPrimitive")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("list"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),_("span",{pre:!0,attrs:{class:"token function"}},[v._v("toArray")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Integer")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])]),_("h6",{attrs:{id:"面-深讲一下hashmap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-深讲一下hashmap"}},[v._v("#")]),v._v(" 面：深讲一下hashmap")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("hashmap是map接口使用频率最高的实现类")])]),v._v(" "),_("li",[_("p",[v._v("hashmap是以key-value对的方式来存储数据（hashmao$node类型）")])]),v._v(" "),_("li",[_("p",[v._v("key不能重复，但是值可以重读，允许使用null键和null值")])]),v._v(" "),_("li",[_("p",[v._v("如果添加相同的key，则会覆盖原来的key-val，等同于修改")])]),v._v(" "),_("li",[_("p",[v._v("与hashset一样，不保证映射的顺序，因为底层是以hash表的方式来存储的 jdk8 的 hashmap 底层 数组+链表+红黑树")])]),v._v(" "),_("li",[_("p",[v._v("hashmap没有实现同步，因此线程是不安全的，方法没有做同步互斥的操作，没有synchronized")])]),v._v(" "),_("li",[_("p",[v._v("（k，v）是一个node实现了map.entry<K,V>,查看hashmap的源码可以看到")])]),v._v(" "),_("li",[_("p",[v._v("jdk7的hashmap底层实现 数组+链表 jdk 8.0 底层 数组链表红黑树")])]),v._v(" "),_("li",[_("p",[v._v("hashmap底层维护了node类型的数组table，默认为null")])]),v._v(" "),_("li",[_("p",[v._v("当创建对象是，将加载因子loadfactor 初始化为0.75")])]),v._v(" "),_("li")]),v._v(" "),_("p",[v._v("当添加key-val时，通过key的哈希值得到在table的索引。然后判断该索引处是否有元素，如果没有元素直接添加。如果该索引有元素，继续判断该元素的key和准备加入的key是否相等，如果相等，则直接替换value；如果不相等需要判断是树结构还是链表结构，做出相应处理。如果添加时发现容量不够，则需要扩容")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("第一次添加，则需要扩容table容量为16，临界值threshold为12，以后再扩容，则需要扩容table容量为原来的2倍，临界值为原来的2倍，即24，依次类推")])]),v._v(" "),_("li",[_("p",[v._v("在java8中，如果一条链表的元素个数超过了treeify threshold 默认为8 ，并且table的大小 >=min treeify capacity 默认64，就会进行树化\n红黑树")])])]),v._v(" "),_("h4",{attrs:{id:"多线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[v._v("#")]),v._v(" 多线程")]),v._v(" "),_("h5",{attrs:{id:"线程基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程基础"}},[v._v("#")]),v._v(" 线程基础")]),v._v(" "),_("h6",{attrs:{id:"面-线程和进程区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-线程和进程区别"}},[v._v("#")]),v._v(" 面：线程和进程区别")]),v._v(" "),_("p",[v._v("线程就是一个指令流，指令流按顺序交给cpu执行")]),v._v(" "),_("p",[v._v("进程是正在运行程序的实例，进程中有线程，每个线程执行不同的任务")]),v._v(" "),_("p",[v._v("不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间")]),v._v(" "),_("p",[v._v("线程更轻量，线程上下文切换成本一般上要比进程上下文切换低(上下文切换指的是从一个线程切换到另一个线程)")]),v._v(" "),_("p",[_("strong",[v._v("守护线程")])]),v._v(" "),_("p",[v._v("守护线程是在后台运行的线程，它的任务是为其他线程提供服务和支持。当程序中仅剩下守护线程时，它会自动退出。")]),v._v(" "),_("p",[v._v("在 Java 中，可以使用 setDaemon() 方法将线程设置为守护线程。当程序中所有非守护线程都退出时，JVM\n会自动结束守护线程。因此，守护线程通常被用来执行一些不需要完全执行或可以被中途中断的任务。")]),v._v(" "),_("p",[v._v("守护线程的特点包括：")]),v._v(" "),_("ul",[_("li",[v._v("它在运行时始终在后台运行，不会阻碍程序的退出。")]),v._v(" "),_("li",[v._v("它没有独立的程序入口，需要依托于其他线程。")]),v._v(" "),_("li",[v._v("它经常被用来执行一些后台任务，如垃圾回收、定时任务等。")])]),v._v(" "),_("p",[v._v("需要注意的是，守护线程可能无法完成某些操作，因为它可能会在程序退出前被强制终止。因此，在运行守护线程时需要格外小心，确保它们的任务可以安全地中断和恢复。")]),v._v(" "),_("h6",{attrs:{id:"面-并发和并行的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-并发和并行的区别"}},[v._v("#")]),v._v(" 面：并发和并行的区别")]),v._v(" "),_("p",[v._v("并发：微观串行，宏观并发，线程轮流使用CPU的做法称为并发，同一时间面对多件事情")]),v._v(" "),_("p",[v._v("并行：多核心可以有多个线程运行")]),v._v(" "),_("h6",{attrs:{id:"面-创建线程的方式有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-创建线程的方式有哪些"}},[v._v("#")]),v._v(" 面：创建线程的方式有哪些")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("继承Thread类 new对象 调用start方法")])]),v._v(" "),_("li",[_("p",[v._v("实现runnable接口 new对象 调用start方法")])]),v._v(" "),_("li",[_("p",[v._v("实现Callable接口 设置泛型 new对象 包装自己的对象 调用start方法")])]),v._v(" "),_("li",[_("p",[v._v("线程池创建线程 继承runnable接口 创建线程池对象 关闭线程池（项目使用方式）")])])]),v._v(" "),_("h6",{attrs:{id:"面-runnable和callable实现区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-runnable和callable实现区别"}},[v._v("#")]),v._v(" 面：runnable和Callable实现区别")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("runnable没有返回值，callable有返回值，看看结果")])]),v._v(" "),_("li",[_("p",[v._v("Runnable还有泛型定义，还可以获取返回值，能获得异常")])]),v._v(" "),_("li",[_("p",[v._v("run不能向上抛异常，但可以trycatch，内部消化")])])]),v._v(" "),_("h6",{attrs:{id:"面-run和start的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-run和start的区别"}},[v._v("#")]),v._v(" 面：run和start的区别")]),v._v(" "),_("p",[v._v("run就是调用普通方法，随便调用")]),v._v(" "),_("p",[v._v("start才是线程真正的开启，线程只能开启一次")]),v._v(" "),_("h6",{attrs:{id:"面-线程有哪些状态-状态之间怎么变化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-线程有哪些状态-状态之间怎么变化"}},[v._v("#")]),v._v(" 面：线程有哪些状态，状态之间怎么变化")]),v._v(" "),_("ul",[_("li",[v._v("参考jdk中thread类中的枚举state\n"),_("ul",[_("li",[v._v("new 没开启的线程 可以创建 就绪状态 有执行权start开始")]),v._v(" "),_("li",[v._v("unnable 正在运行的 抢到cpu和锁")]),v._v(" "),_("li",[v._v("blocker 被阻塞的 拿不到锁")]),v._v(" "),_("li",[v._v("waiting 等待的 notify唤醒 wait你等吧")]),v._v(" "),_("li",[v._v("time_waitting 等一段时间就开始执行的 sleep让你睡觉")]),v._v(" "),_("li",[v._v("terminated 死亡的线程 不要你了")])])])]),v._v(" "),_("h6",{attrs:{id:"面-新建三个线程-如何让它们按顺序执行"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-新建三个线程-如何让它们按顺序执行"}},[v._v("#")]),v._v(" 面：新建三个线程，如何让它们按顺序执行")]),v._v(" "),_("ul",[_("li",[v._v("使用join方法 就是加入呗 trycatch 每次执行 让你线程执行完 我接着进行 这里使用了一下匿名内部类？还是lamaba表达式？")])]),v._v(" "),_("h6",{attrs:{id:"面-notify和notifyall区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-notify和notifyall区别"}},[v._v("#")]),v._v(" 面：notify和notifyall区别")]),v._v(" "),_("p",[v._v("一个唤醒随机一个")]),v._v(" "),_("p",[v._v("一个唤醒所有线程")]),v._v(" "),_("h6",{attrs:{id:"面-wait和sleep不同"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-wait和sleep不同"}},[v._v("#")]),v._v(" 面：wait和sleep不同")]),v._v(" "),_("p",[v._v("相同点：都能让当前线程放弃spu使用权")]),v._v(" "),_("p",[v._v("不同点：")]),v._v(" "),_("p",[v._v("方法归属不同，sleep是thread的静态方法，wait是object成员方法，每个对象都有")]),v._v(" "),_("p",[v._v("醒来时机不同，说不清清楚")]),v._v(" "),_("p",[v._v("锁特性不同，wait必须获得对象锁，sleep不用，wait可以释放对象锁，允许其他线程用，但是sleep在synchronized代码块中执行，放弃了，其他线程也用不来")]),v._v(" "),_("h6",{attrs:{id:"面-如何停止一个正在运行的线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-如何停止一个正在运行的线程"}},[v._v("#")]),v._v(" 面：如何停止一个正在运行的线程")]),v._v(" "),_("ul",[_("li",[v._v("使用退出标志 flag 更改状态就行")]),v._v(" "),_("li",[v._v("使用stop方法强行终止，已经不用了")]),v._v(" "),_("li",[v._v("使用interrupt方法\n"),_("ul",[_("li",[v._v("打断阻塞的线程，线程会抛出interruptedExceptation")]),v._v(" "),_("li",[v._v("打断正常的线程，可以根据打断状态来标记是否退出线程")])])])]),v._v(" "),_("h5",{attrs:{id:"线程安全"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程安全"}},[v._v("#")]),v._v(" 线程安全")]),v._v(" "),_("h6",{attrs:{id:"面-synchronized关键字的底层原理-基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-synchronized关键字的底层原理-基础"}},[v._v("#")]),v._v(" 面：synchronized关键字的底层原理-基础")]),v._v(" "),_("p",[v._v("非原子性操作，需要一个对象锁，同一时刻只能一个人拿到这个锁，其他线程也会被阻塞")]),v._v(" "),_("p",[v._v("monitor class反汇编")]),v._v(" "),_("ul",[_("li",[v._v("上锁 解锁 解锁")])]),v._v(" "),_("p",[v._v("monitor是监视器，由jvm提供，c++语言实现")]),v._v(" "),_("ul",[_("li",[v._v("三个属性 waitset等待调用后等待的放这里 entrylis阻塞队列没有排队不是先来后到 owner只能关联一个线程")])]),v._v(" "),_("p",[v._v("想到了操作系统 非公平锁 互斥")]),v._v(" "),_("h6",{attrs:{id:"面-synchronized关键字的底层原理-进阶"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-synchronized关键字的底层原理-进阶"}},[v._v("#")]),v._v(" 面：synchronized关键字的底层原理-进阶")]),v._v(" "),_("p",[v._v("问题抛出：moniter实现的锁属于重量级锁 锁升级")]),v._v(" "),_("ul",[_("li",[v._v("涉及到了用户态和核心态的切换、进程的上下文切换，成本较高，性能低")]),v._v(" "),_("li",[v._v("jdk1.6引入了两种新锁机制，偏向锁和轻量级锁，引入是解决没有多线程竞争或基本没有竞争的场景下使用传统锁机制带来的性能开销问题")])]),v._v(" "),_("p",[_("strong",[v._v("对象内存结构 hotspot虚拟机 对象在内存中的布局分为3块区域 对象头 实例数据 对齐填充")])]),v._v(" "),_("p",[v._v("对象头 对象头 描述对象实例的具体类型")]),v._v(" "),_("p",[v._v("实例数据 成员变量")]),v._v(" "),_("p",[v._v("对齐填充 如果是不会8的整数倍，则通过对齐填充补齐 这里就是要求地址 不散吧")]),v._v(" "),_("p",[_("strong",[v._v("Markword")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("Mark Word (32 bits)")])]),v._v(" "),_("th"),v._v(" "),_("th"),v._v(" "),_("th"),v._v(" "),_("th"),v._v(" "),_("th")])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("hashcode : 25")]),v._v(" "),_("td"),v._v(" "),_("td",[v._v("age : 4")]),v._v(" "),_("td",[v._v("biased_lock : 0")]),v._v(" "),_("td",[v._v("01")]),v._v(" "),_("td",[v._v("无锁")])]),v._v(" "),_("tr",[_("td",[v._v("thread : 23")]),v._v(" "),_("td",[v._v("epoch : 2")]),v._v(" "),_("td",[v._v("age : 4")]),v._v(" "),_("td",[v._v("biased_lock : 1")]),v._v(" "),_("td",[v._v("01")]),v._v(" "),_("td",[v._v("偏向锁")])]),v._v(" "),_("tr",[_("td",[v._v("ptr_to_lock_record : 30")]),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td",[v._v("00")]),v._v(" "),_("td",[v._v("轻量级锁")])]),v._v(" "),_("tr",[_("td",[v._v("ptr_to_heavyweight_monitor : 30")]),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td",[v._v("10")]),v._v(" "),_("td",[v._v("重量级锁")])]),v._v(" "),_("tr",[_("td"),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td"),v._v(" "),_("td",[v._v("11")]),v._v(" "),_("td",[v._v("标记为GC")])])])]),v._v(" "),_("p",[v._v("hashcode：25位的对象标识Hash码")]),v._v(" "),_("p",[v._v("lock标识：2位")]),v._v(" "),_("p",[v._v("age：对象分代年龄占4位")]),v._v(" "),_("p",[v._v("biased_lock：偏向锁标识，占1位 ，0表示没有开始偏向锁，1表示开启了偏向锁")]),v._v(" "),_("p",[v._v("thread：持有偏向锁的线程ID，占23位")]),v._v(" "),_("p",[v._v("epoch：偏向时间戳，占2位")]),v._v(" "),_("p",[v._v("ptr_to_lock_record：轻量级锁状态下，指向栈中锁记录的指针，占30位")]),v._v(" "),_("p",[v._v("ptr_to_heavyweight_monitor：重量级锁状态下，指向对象监视器Monitor的指针，占30位")]),v._v(" "),_("p",[_("strong",[v._v("轻量级锁")])]),v._v(" "),_("p",[v._v("为什么用，竞争不激烈，用性能消耗更少的的轻量级锁。")]),v._v(" "),_("ul",[_("li",[v._v("加锁流程")])]),v._v(" "),_("p",[v._v("1.在线程栈中创建一个Lock Record，将其obj字段指向锁对象。")]),v._v(" "),_("p",[v._v("2.通过CAS指令将Lock Record的地址存储在对象头的mark word中，如果对象处于无锁状态则修改成功，代表该线程获得了轻量级锁。")]),v._v(" "),_("p",[v._v("3.如果是当前线程已经持有该锁了，代表这是一次锁重入。设置Lock Record第一部分为null，起到了一个重入计数器的作用。")]),v._v(" "),_("p",[v._v("4.如果CAS修改失败，说明发生了竞争，需要膨胀为重量级锁。")]),v._v(" "),_("ul",[_("li",[v._v("解锁过程")])]),v._v(" "),_("p",[v._v("1.遍历线程栈,找到所有obj字段等于当前锁对象的Lock Record。")]),v._v(" "),_("p",[v._v("2.如果Lock Record的Mark Word为null，代表这是一次重入，将obj设置为null后continue。")]),v._v(" "),_("p",[v._v("3.如果Lock Record的 Mark Word不为null，则利用CAS指令将对象头的mark word恢复成为无锁状态。如果失败则膨胀为重量级锁。")]),v._v(" "),_("p",[_("strong",[v._v("偏向锁")])]),v._v(" "),_("p",[v._v("轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。为了性能更好，Java 6 中引入了偏向锁来做进一步优化：只有第一次使用CAS将线程\nID设置到对象的MarkWord 头，之后发现这个线程ID是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有。")]),v._v(" "),_("h6",{attrs:{id:"面-mintor实现的锁属于重量级锁-锁升级了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-mintor实现的锁属于重量级锁-锁升级了解吗"}},[v._v("#")]),v._v(" 面：Mintor实现的锁属于重量级锁，锁升级了解吗")]),v._v(" "),_("p",[v._v("Java中的synchronized有偏向锁、轻量级锁、重量级锁三种形式，分别对应了锁只被一个线程持有、不同线程交替持有锁、多线程竞争锁三种情况。")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"left"}}),v._v(" "),_("th",[_("strong",[v._v("描述")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"left"}},[v._v("重量级锁")]),v._v(" "),_("td",[v._v("底层使用的Monitor实现，里面涉及到了用户态和内核态的切换、进程的上下文切换，成本较高，性能比较低。")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[v._v("轻量级锁")]),v._v(" "),_("td",[v._v("线程加锁的时间是错开的（也就是没有竞争），可以使用轻量级锁来优化。轻量级修改了对象头的锁标志，相对重量级锁性能提升很多。每次修改都是CAS操作，保证原子性")])]),v._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[v._v("偏向锁")]),v._v(" "),_("td",[v._v("一段很长的时间内都只被一个线程使用锁，可以使用了偏向锁，在第一次获得锁时，会有一个CAS操作，之后该线程再获取锁，只需要判断mark  word中是否是自己的线程id即可，而不是开销相对较大的CAS命令")])])])]),v._v(" "),_("p",[v._v("一旦锁发生了竞争，都会升级为重量级锁。")]),v._v(" "),_("h6",{attrs:{id:"面-谈谈jmm"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-谈谈jmm"}},[v._v("#")]),v._v(" 面：谈谈JMM")]),v._v(" "),_("p",[v._v("Java Memory Model：定义了共享内存中多线程程序读写操作的行为规范，通过这些规则来规范对内存的读写操作从而保证指令的正确性")]),v._v(" "),_("p",[v._v("简单来说就是java内存模型给内存读取写入定义的行为规范。")]),v._v(" "),_("h6",{attrs:{id:"面-谈谈你对cas理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-谈谈你对cas理解"}},[v._v("#")]),v._v(" 面：谈谈你对CAS理解")]),v._v(" "),_("p",[v._v("CAS是： Compare And Swap(比较再交换)，它体现的一种乐观锁的思想，在无锁情况下保证线程操作共享数据的原子性。")]),v._v(" "),_("p",[v._v("在JUC（ java.util.concurrent ）包下实现的很多类都用到了CAS操作，如：lAbstractQueuedSynchronizer（AQS框架），lAtomicXXX类")]),v._v(" "),_("p",[v._v("一个当前内存值V、旧的预期值A、即将更新的值B，当且仅当旧的预期值A和内存值V相同时，将内存值修改为B并返回true，否则什么都不做，并返回false。如果CAS操作失败，通过自旋的方式等待并再次尝试，直到成功。")]),v._v(" "),_("p",[v._v("优缺点：因为没有加锁，所以线程不会陷入阻塞，效率较高，如果竞争激烈，重试频繁发生，效率会受影响")]),v._v(" "),_("p",[v._v("底层实现：CAS 底层依赖于一个 Unsafe 类来直接调用操作系统底层的 CAS 指令")]),v._v(" "),_("h6",{attrs:{id:"面-乐观锁和悲观锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-乐观锁和悲观锁"}},[v._v("#")]),v._v(" 面：乐观锁和悲观锁")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("CAS 是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。像redis的版本号控制法，但是要高并发的情况下，很有可能出现东西卖不出去的可能")])]),v._v(" "),_("li",[_("p",[v._v("synchronized 是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。")])])]),v._v(" "),_("h6",{attrs:{id:"面-请谈谈对volatile的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-请谈谈对volatile的理解"}},[v._v("#")]),v._v(" 面：请谈谈对volatile的理解")]),v._v(" "),_("p",[v._v("一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("保证线程间的可见性 用 volatile 修饰共享变量，能够防止编译器等优化发生，让一个线程对共享变量的修改对另一个线程可见")])]),v._v(" "),_("li",[_("p",[v._v("禁止进行指令重排序 用 volatile 修饰共享变量会在读、写共享变量时加入不同的屏障，阻止其他读写操作越过屏障，从而达到阻止重排序的效果")])])]),v._v(" "),_("h6",{attrs:{id:"面-什么是aqs"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-什么是aqs"}},[v._v("#")]),v._v(" 面：什么是AQS")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("是多线程中的队列同步器。是一种锁机制，它是做为一个基础框架使用的，像ReentrantLock、Semaphore、countDownLatch都是基于AQS实现的")])]),v._v(" "),_("li",[_("p",[v._v("AQS内部维护了一个先进先出的双向队列，队列中存储的排队的线程")])]),v._v(" "),_("li",[_("p",[v._v("在AQS内部还有一个属性state，这个state就相当于是一个资源，默认是0（无锁状态），如果队列中的有一个线程修改成功了state为1，则当前线程就相等于获取了资源")])]),v._v(" "),_("li",[_("p",[v._v("在对state修改的时候使用的cas操作，保证多个线程修改的情况下原子性")])])]),v._v(" "),_("h6",{attrs:{id:"面-reentrantlock的实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-reentrantlock的实现原理"}},[v._v("#")]),v._v(" 面：ReentrantLock的实现原理")]),v._v(" "),_("p",[v._v("ReentrantLock翻译过来是可重入锁，相对于synchronized它具备以下特点：")]),v._v(" "),_("ul",[_("li",[v._v("ReentrantLock表示支持重新进入的锁，调用lock方法获取了锁之后，再次调用 lock，是不会再阻塞")]),v._v(" "),_("li",[v._v("ReentrantLock主要利用CAS+AQS队列来实现")]),v._v(" "),_("li",[v._v("支持公平锁和非公平锁，在提供的构造器的中无参默认是非公平锁，也可以传参设置为公平锁")])]),v._v(" "),_("h6",{attrs:{id:"面-synchronized和lock有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-synchronized和lock有什么区别"}},[v._v("#")]),v._v(" 面：synchronized和Lock有什么区别")]),v._v(" "),_("ul",[_("li",[v._v("语法层面")])]),v._v(" "),_("p",[v._v("synchronized 是关键字，源码在 jvm 中，用 c++ 语言实现")]),v._v(" "),_("p",[v._v("Lock 是接口，源码由 jdk 提供，用 java 语言实现")]),v._v(" "),_("p",[v._v("使用 synchronized 时，退出同步代码块锁会自动释放，而使用 Lock 时，需要手动调用 unlock 方法释放锁")]),v._v(" "),_("ul",[_("li",[v._v("功能层面")])]),v._v(" "),_("p",[v._v("二者均属于悲观锁、都具备基本的互斥、同步、锁重入功能")]),v._v(" "),_("p",[v._v("Lock 提供了许多 synchronized 不具备的功能，例如公平锁、可打断、可超时、多条件变量")]),v._v(" "),_("p",[v._v("Lock 有适合不同场景的实现，如 ReentrantLock， ReentrantReadWriteLock(读写锁)")]),v._v(" "),_("ul",[_("li",[v._v("性能层面")])]),v._v(" "),_("p",[v._v("在没有竞争时，synchronized 做了很多优化，如偏向锁、轻量级锁，性能不赖")]),v._v(" "),_("p",[v._v("在竞争激烈时，Lock 的实现通常会提供更好的性能，像redis确实会使用lock")]),v._v(" "),_("h6",{attrs:{id:"面-死锁出现的条件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-死锁出现的条件"}},[v._v("#")]),v._v(" 面：死锁出现的条件")]),v._v(" "),_("p",[v._v("一个线程需要同时获取多把锁，这时就容易发生死锁")]),v._v(" "),_("p",[v._v("怎么发现：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("jps：输出JVM中运行的进程状态信息")])]),v._v(" "),_("li",[_("p",[v._v("jstack：查看java进程内线程的堆栈信息")])])]),v._v(" "),_("p",[v._v("其他可视化工具也可以")]),v._v(" "),_("h6",{attrs:{id:"面-聊一下concurrenthashmap"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-聊一下concurrenthashmap"}},[v._v("#")]),v._v(" 面：聊一下concurrenthashmap")]),v._v(" "),_("p",[v._v("ConcurrentHashMap 是一种线程安全的高效Map集合")]),v._v(" "),_("p",[v._v("底层数据结构：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("JDK1.7底层采用分段的数组+链表实现")])]),v._v(" "),_("li",[_("p",[v._v("JDK1.8 采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑二叉树")])])]),v._v(" "),_("p",[v._v("加锁的方式")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("JDK1.7采用Segment分段锁，底层使用的是ReentrantLock")])]),v._v(" "),_("li",[_("p",[v._v("JDK1.8采用CAS添加新节点，采用synchronized锁定链表或红黑二叉树的首节点，相对Segment分段锁粒度更细，性能更好")])])]),v._v(" "),_("h6",{attrs:{id:"面-导致并发程序出现问题的根本原因是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-导致并发程序出现问题的根本原因是什么"}},[v._v("#")]),v._v(" 面：导致并发程序出现问题的根本原因是什么")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("原子性 synchronized、lock")])]),v._v(" "),_("li",[_("p",[v._v("内存可见性 volatile、synchronized、lock 让一个线程对共享变量的修改对另一个线程可见")])]),v._v(" "),_("li",[_("p",[v._v("有序性 volatile 指令重排：处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的，防止先读后写")])])]),v._v(" "),_("h5",{attrs:{id:"线程池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[v._v("#")]),v._v(" 线程池")]),v._v(" "),_("h6",{attrs:{id:"面-说一下线程池的核心参数-线程池的执行原理知道吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-说一下线程池的核心参数-线程池的执行原理知道吗"}},[v._v("#")]),v._v(" 面：说一下线程池的核心参数，线程池的执行原理知道吗")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("corePoolSize 核心线程数目")])]),v._v(" "),_("li",[_("p",[v._v("maximumPoolSize 最大线程数目 = (核心线程+救急线程的最大数目)")])]),v._v(" "),_("li",[_("p",[v._v("keepAliveTime 生存时间 - 救急线程的生存时间，生存时间内没有新任务，此线程资源会释放")])]),v._v(" "),_("li",[_("p",[v._v("unit 时间单位 - 救急线程的生存时间单位，如秒、毫秒等")])]),v._v(" "),_("li",[_("p",[v._v("workQueue - 当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务")])]),v._v(" "),_("li",[_("p",[v._v("threadFactory 线程工厂 - 可以定制线程对象的创建，例如设置线程名字、是否是守护线程等")])]),v._v(" "),_("li",[_("p",[v._v("handler 拒绝策略 - 当所有线程都在繁忙，workQueue 也放满时，会触发拒绝策略")])])]),v._v(" "),_("p",[_("strong",[v._v("执行原理")])]),v._v(" "),_("p",[v._v("提交任务-核心线程-阻塞队列-线程是否大于最大线程数-创建非核心线程执行任务-拒绝策略")]),v._v(" "),_("p",[v._v("如果核心或临时线程执行完成任务后会检查阻塞队列中是否有需要执行的线程，如果有，则使用非核心线程执行任务")]),v._v(" "),_("p",[v._v("拒绝策略：")]),v._v(" "),_("p",[v._v("1.AbortPolicy：直接抛出异常，默认策略；")]),v._v(" "),_("p",[v._v("2.CallerRunsPolicy：用调用者所在的线程来执行任务；")]),v._v(" "),_("p",[v._v("3.DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；")]),v._v(" "),_("p",[v._v("4.DiscardPolicy：直接丢弃任务；")]),v._v(" "),_("h6",{attrs:{id:"面-线程池中有哪些常见的阻塞队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-线程池中有哪些常见的阻塞队列"}},[v._v("#")]),v._v(" 面：线程池中有哪些常见的阻塞队列")]),v._v(" "),_("p",[v._v("workQueue：当没有空闲核心线程时，新来任务会加入到此队列排队，队列满会创建救急线程执行任务")]),v._v(" "),_("p",[v._v("1.ArrayBlockingQueue：基于数组结构的有界阻塞队列，FIFO。")]),v._v(" "),_("p",[v._v("2.LinkedBlockingQueue：基于链表结构的有界阻塞队列，FIFO。")]),v._v(" "),_("p",[v._v("3.DelayedWorkQueue ：是一个优先级队列，它可以保证每次出队的任务都是当前队列中执行时间最靠前的")]),v._v(" "),_("p",[v._v("4.SynchronousQueue：不存储元素的阻塞队列，每个插入操作都必须等待一个移出操作。")]),v._v(" "),_("p",[v._v("区别：")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("LinkedBlockingQueue")])]),v._v(" "),_("th",[_("strong",[v._v("ArrayBlockingQueue")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("默认无界，支持有界")]),v._v(" "),_("td",[v._v("强制有界")])]),v._v(" "),_("tr",[_("td",[v._v("底层是链表")]),v._v(" "),_("td",[v._v("底层是数组")])]),v._v(" "),_("tr",[_("td",[v._v("是懒惰的，创建节点的时候添加数据")]),v._v(" "),_("td",[v._v("提前初始化 Node  数组")])]),v._v(" "),_("tr",[_("td",[v._v("入队会生成新 Node")]),v._v(" "),_("td",[v._v("Node需要是提前创建好的")])]),v._v(" "),_("tr",[_("td",[v._v("两把锁（头尾）")]),v._v(" "),_("td",[v._v("一把锁")])])])]),v._v(" "),_("h6",{attrs:{id:"面-如何确定核心线程数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-如何确定核心线程数"}},[v._v("#")]),v._v(" 面：如何确定核心线程数")]),v._v(" "),_("p",[v._v("IO密集型任务：文件读写、DB读写、网络请求 2n+1")]),v._v(" "),_("p",[v._v("CPU密集型任务：计算型、Bitmap转换、Gson转换 n+1")]),v._v(" "),_("p",[_("strong",[v._v("参考回答")])]),v._v(" "),_("p",[v._v("参考回答：")]),v._v(" "),_("p",[v._v("1、高并发、任务执行时间短（ CPU核数+1 ），减少线程上下文的切换")]),v._v(" "),_("p",[v._v("2、并发不高、任务执行时间长")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("IO密集型的任务 (CPU核数 * 2 + 1)")])]),v._v(" "),_("li",[_("p",[v._v("计算密集型任务（ CPU核数+1 ）")])])]),v._v(" "),_("p",[v._v("3、并发高、业务执行时间长，解决这种类型任务的关键不在于线程池而在于整体架构的设计，看看这些业务里面某些数据是否能做缓存是第一步，增加服务器是第二步，至于线程池的设置，设置参考2")]),v._v(" "),_("h6",{attrs:{id:"面-线程池的种类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-线程池的种类"}},[v._v("#")]),v._v(" 面：线程池的种类")]),v._v(" "),_("p",[v._v("四种")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("newFixedThreadPool：创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待")])]),v._v(" "),_("li",[_("p",[v._v("newSingleThreadExecutor：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任 务，保证所有任务按照指定顺序(FIFO)执行")])]),v._v(" "),_("li",[_("p",[v._v("newCachedThreadPool：创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程")])]),v._v(" "),_("li",[_("p",[v._v("newScheduledThreadPool：可以执行延迟任务的线程池，支持定时及周期性任务执行")])])]),v._v(" "),_("h6",{attrs:{id:"面-为什么不建议用executors创建线程池"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-为什么不建议用executors创建线程池"}},[v._v("#")]),v._v(" 面：为什么不建议用Executors创建线程池")]),v._v(" "),_("p",[v._v("[强制]线程池不允许使用Executors去创建,而是通过ThreadPoolExecutor的方式,这样的处理方式让写的人更加明确线程池的运行规则,规避资源耗尽的风险。")]),v._v(" "),_("p",[v._v("说明: Executors返回的线程池对象的弊端如下:")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("FixedThreadPool和SingleThreadPool：允许的请求队列长度为Integer.MAX_ VALUE ,可能会堆积大量的请求,从而导致00M。")])]),v._v(" "),_("li",[_("p",[v._v("CachedThreadPool：允许的创建线程数量为Integer.MAX_ VALUE ,可能会创建大量的线程,从而导致0OM。")])])]),v._v(" "),_("h5",{attrs:{id:"使用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[v._v("#")]),v._v(" 使用场景")]),v._v(" "),_("h6",{attrs:{id:"面-线程池使用场景-countdownlatch、future-你们项目哪里用到了多线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-线程池使用场景-countdownlatch、future-你们项目哪里用到了多线程"}},[v._v("#")]),v._v(" 面：线程池使用场景（CountDownLatch、Future）你们项目哪里用到了多线程")]),v._v(" "),_("p",[v._v("CountDownLatch（闭锁/倒计时锁）用来进行线程同步协作，等待所有线程完成倒计时（一个或者多个线程，等待其他多个线程完成某件事情之后才能执行）")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("其中构造参数用来初始化等待计数值")])]),v._v(" "),_("li",[_("p",[v._v("await() 用来等待计数归零")])]),v._v(" "),_("li",[_("p",[v._v("countDown() 用来让计数减一")])])]),v._v(" "),_("p",[_("strong",[v._v("场景1")]),v._v("：es数据批量导入")]),v._v(" "),_("p",[v._v("在我们项目上线之前，我们需要把数据库中的数据一次性的同步到es索引库中，但是当时的数据好像是1000万左右，一次性读取数据肯定不行（oom异常），当时我就想到可以使用线程池的方式导入，利用CountDownLatch来控制，就能避免一次性加载过多，防止内存溢出。")]),v._v(" "),_("p",[_("strong",[v._v("场景2")]),v._v("：数据汇总")]),v._v(" "),_("p",[v._v("在一个电商网站中，用户下单之后，需要查询数据，数据包含了三部分：订单信息、包含的商品、物流信息；这三块信息都在不同的微服务中进行实现的，我们如何完成这个业务呢？")]),v._v(" "),_("p",[v._v("在实际开发的过程中，难免需要调用多个接口来汇总数据，如果所有接口（或部分接口）的没有依赖关系，就可以使用线程池+future来提升性能")]),v._v(" "),_("p",[_("strong",[v._v("场景3")]),v._v("：异步调用")]),v._v(" "),_("p",[v._v("异步保存，常用于搜索？")]),v._v(" "),_("p",[_("strong",[v._v("总结")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("批量导入：使用了线程池+CountDownLatch批量把数据库中的数据导入到了ES(任意)中，避免OOM")])]),v._v(" "),_("li",[_("p",[v._v("数据汇总：调用多个接口来汇总数据，如果所有接口（或部分接口）的没有依赖关系，就可以使用线程池+future来提升性能")])]),v._v(" "),_("li",[_("p",[v._v("异步线程（线程池）：为了避免下一级方法影响上一级方法（性能考虑），可使用异步线程调用下一个方法（不需要下一级方法返回值），可以提升方法响应时间")])])]),v._v(" "),_("h6",{attrs:{id:"面-如何控制某个方法允许并发访问线程的数量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-如何控制某个方法允许并发访问线程的数量"}},[v._v("#")]),v._v(" 面：如何控制某个方法允许并发访问线程的数量")]),v._v(" "),_("p",[v._v("Semaphore信号量，是JUC包下的一个工具类，底层是AQS，我们可以通过其限制执行的线程数量。")]),v._v(" "),_("p",[v._v("使用场景：")]),v._v(" "),_("p",[v._v("通常用于那些资源有明确访问数量限制的场景，常用于限流 。")]),v._v(" "),_("p",[v._v("Semaphore使用步骤")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("创建Semaphore对象，可以给一个容量")])]),v._v(" "),_("li",[_("p",[v._v("semaphore.acquire()： 请求一个信号量，这时候的信号量个数-1（一旦没有可使用的信号量，也即信号量个数变为负数时，再次请求的时候就会阻塞，直到其他线程释放了信号量）")])]),v._v(" "),_("li",[_("p",[v._v("semaphore.release()：释放一个信号量，此时信号量个数+1")])])]),v._v(" "),_("h6",{attrs:{id:"面-谈谈你对threadlocal的理解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-谈谈你对threadlocal的理解"}},[v._v("#")]),v._v(" 面：谈谈你对ThreadLocal的理解")]),v._v(" "),_("p",[v._v("ThreadLocal是多线程中对于解决线程安全的一个操作类，它会为每个线程都分配一个独立的线程副本从而解决了变量并发访问冲突的问题。ThreadLocal\n同时实现了线程内的资源共享。")]),v._v(" "),_("p",[v._v("案例：使用JDBC操作数据库时，会将每一个线程的Connection放入各自的ThreadLocal中，从而保证每个线程都在各自的 Connection\n上进行数据库的操作，避免A线程关闭了B线程的连接。")]),v._v(" "),_("p",[v._v("ThreadLocal本质来说就是一个线程内部存储类，从而让多个线程只操作自己内部的值，从而实现线程数据隔离。")]),v._v(" "),_("h6",{attrs:{id:"面-threadlocal内存泄露问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-threadlocal内存泄露问题"}},[v._v("#")]),v._v(" 面：threadlocal内存泄露问题")]),v._v(" "),_("p",[v._v("Java对象中的四种引用类型：强引用、软引用、弱引用、虚引用")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("强引用：最为普通的引用方式，表示一个对象处于有用且必须的状态，如果一个对象具有强引用，则GC并不会回收它。即便堆中内存不足了，宁可出现OOM，也不会对其进行回收\n"),_("em",[v._v("Out of Memory：指内存不足错误，指某个程序或系统无法分配足够的内存，导致程序崩溃或系统不稳定。")])])]),v._v(" "),_("li",[_("p",[v._v("弱引用：表示一个对象处于可能有用且非必须的状态。在GC线程扫描内存区域时，一旦发现弱引用，就会回收到弱引用相关联的对象。对于弱引用的回收，无关内存区域是否足够，一旦发现则会被回收")])])]),v._v(" "),_("h6",{attrs:{id:"面-总结一下threadlocal"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-总结一下threadlocal"}},[v._v("#")]),v._v(" 面：总结一下ThreadLocal")]),v._v(" "),_("p",[v._v("1、ThreadLocal 可以实现【资源对象】的线程隔离，让每个线程各用各的【资源对象】，避免争用引发的线程安全问题")]),v._v(" "),_("p",[v._v("2、ThreadLocal 同时实现了线程内的资源共享")]),v._v(" "),_("p",[v._v("3、每个线程内有一个 ThreadLocalMap 类型的成员变量，用来存储资源对象")]),v._v(" "),_("p",[v._v("a)调用 set 方法，就是以 ThreadLocal 自己作为 key，资源对象作为 value，放入当前线")]),v._v(" "),_("p",[v._v("程的 ThreadLocalMap 集合中")]),v._v(" "),_("p",[v._v("b)调用 get 方法，就是以 ThreadLocal 自己作为 key，到当前线程中查找关联的资源值")]),v._v(" "),_("p",[v._v("c)调用 remove 方法，就是以 ThreadLocal 自己作为 key，移除当前线程关联的资源值")]),v._v(" "),_("p",[v._v("4、ThreadLocal内存泄漏问题")]),v._v(" "),_("p",[v._v("ThreadLocalMap 中的 key 是弱引用，值为强引用； key 会被GC 释放内存，关联 value 的内存并不会释放。建议主动 remove 释放\nkey，value。")]),v._v(" "),_("h3",{attrs:{id:"框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[v._v("#")]),v._v(" 框架")]),v._v(" "),_("h4",{attrs:{id:"spring"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[v._v("#")]),v._v(" spring")]),v._v(" "),_("h6",{attrs:{id:"面-spring框架中的单例bean是线程安全的吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-spring框架中的单例bean是线程安全的吗"}},[v._v("#")]),v._v(" 面：spring框架中的单例bean是线程安全的吗")]),v._v(" "),_("p",[v._v("spring框架中有@Scope注解，可以进行设置是否是单例。")]),v._v(" "),_("p",[v._v("因为一般在spring的bean的中都是注入无状态的对象，没有线程安全问题，如果在bean中定义了可修改的成员变量，是要考虑线程安全问题的，可以使用多例或者加锁来解决")]),v._v(" "),_("h6",{attrs:{id:"面-什么是aop-你们项目中有没有使用到aop"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-什么是aop-你们项目中有没有使用到aop"}},[v._v("#")]),v._v(" 面：什么是AOP，你们项目中有没有使用到AOP")]),v._v(" "),_("p",[v._v("AOP称为面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”（Aspect），减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。")]),v._v(" "),_("p",[v._v("常见的AOP使用场景：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("记录操作日志")])]),v._v(" "),_("li",[_("p",[v._v("缓存处理")])]),v._v(" "),_("li",[_("p",[v._v("Spring中内置的事务处理")])])]),v._v(" "),_("h6",{attrs:{id:"面-spring中的事务是如何实现的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-spring中的事务是如何实现的"}},[v._v("#")]),v._v(" 面：Spring中的事务是如何实现的")]),v._v(" "),_("p",[v._v("Spring支持编程式事务管理和声明式事务管理两种方式。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("编程式事务控制：需使用TransactionTemplate来进行实现，对业务代码有侵入性，项目中很少使用")])]),v._v(" "),_("li",[_("p",[v._v("声明式事务管理：声明式事务管理建立在AOP之上的。其本质是通过AOP功能，对方法前后进行拦截，将事务处理的功能编织到拦截的方法中，也就是在目标方法开始之前加入一个事务，在执行完目标方法之后根据执行情况提交或者回滚事务。")])])]),v._v(" "),_("h6",{attrs:{id:"面-spring事务失效的情况"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-spring事务失效的情况"}},[v._v("#")]),v._v(" 面：spring事务失效的情况")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("异常捕获处理，自己处理了异常，没有抛出，解决：手动抛出")])]),v._v(" "),_("li",[_("p",[v._v("抛出检查异常，配置rollbackFor属性为Exception")])]),v._v(" "),_("li",[_("p",[v._v("非public方法导致的事务失效，改为public")])])]),v._v(" "),_("h6",{attrs:{id:"面-spring中bean的生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-spring中bean的生命周期"}},[v._v("#")]),v._v(" 面：spring中bean的生命周期")]),v._v(" "),_("p",[v._v("1、通过BeanDefinition获取bean的定义信息")]),v._v(" "),_("p",[v._v("2、调用构造函数实例化bean")]),v._v(" "),_("p",[v._v("3、bean的依赖注入")]),v._v(" "),_("p",[v._v("4、处理Aware接口(BeanNameAware、BeanFactoryAware、ApplicationContextAware)")]),v._v(" "),_("p",[v._v("5、Bean的后置处理器BeanPostProcessor-前置")]),v._v(" "),_("p",[v._v("6、初始化方法(InitializingBean、init-method)")]),v._v(" "),_("p",[v._v("7、Bean的后置处理器BeanPostProcessor-后置")]),v._v(" "),_("p",[v._v("8、销毁bean")]),v._v(" "),_("h6",{attrs:{id:"面-spring的循环引用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-spring的循环引用"}},[v._v("#")]),v._v(" 面：spring的循环引用")]),v._v(" "),_("p",[v._v("循环依赖：循环依赖其实就是循环引用,也就是两个或两个以上的bean互相持有对方,最终形成闭环。比如A依赖于B,B依赖于A")]),v._v(" "),_("p",[v._v("循环依赖在spring中是允许存在，spring框架依据三级缓存已经解决了大部分的循环依赖")]),v._v(" "),_("p",[v._v("1、一级缓存：单例池，缓存已经经历了完整的生命周期，已经初始化完成的bean对象")]),v._v(" "),_("p",[v._v("2、二级缓存：缓存早期的bean对象（生命周期还没走完）")]),v._v(" "),_("p",[v._v("3、三级缓存：缓存的是ObjectFactory，表示对象工厂，用来创建某个对象的")]),v._v(" "),_("h6",{attrs:{id:"面-构造方法出现了循环依赖怎么解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-构造方法出现了循环依赖怎么解决"}},[v._v("#")]),v._v(" 面：构造方法出现了循环依赖怎么解决")]),v._v(" "),_("p",[v._v("A依赖于B，B依赖于A，注入的方式是构造函数")]),v._v(" "),_("p",[_("strong",[v._v("原因")]),v._v("：由于bean的生命周期中构造函数是第一个执行的，spring框架并不能解决构造函数的的依赖注入")]),v._v(" "),_("p",[_("strong",[v._v("解决方案")]),v._v("：使用@Lazy进行懒加载，什么时候需要对象再进行bean对象的创建")]),v._v(" "),_("h6",{attrs:{id:"面-spring常用注解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-spring常用注解"}},[v._v("#")]),v._v(" 面：spring常用注解")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("注解")])]),v._v(" "),_("th",[_("strong",[v._v("说明")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("@Component、@Controller、@Service、@Repository")]),v._v(" "),_("td",[v._v("使用在类上用于实例化Bean")])]),v._v(" "),_("tr",[_("td",[v._v("@Autowired")]),v._v(" "),_("td",[v._v("使用在字段上用于根据类型依赖注入")])]),v._v(" "),_("tr",[_("td",[v._v("@Qualifier")]),v._v(" "),_("td",[v._v("结合@Autowired一起使用用于根据名称进行依赖注入")])]),v._v(" "),_("tr",[_("td",[v._v("@Scope")]),v._v(" "),_("td",[v._v("标注Bean的作用范围")])]),v._v(" "),_("tr",[_("td",[v._v("@Configuration")]),v._v(" "),_("td",[v._v("指定当前类是一个 Spring  配置类，当创建容器时会从该类上加载注解")])]),v._v(" "),_("tr",[_("td",[v._v("@ComponentScan")]),v._v(" "),_("td",[v._v("用于指定 Spring  在初始化容器时要扫描的包")])]),v._v(" "),_("tr",[_("td",[v._v("@Bean")]),v._v(" "),_("td",[v._v("使用在方法上，标注将该方法的返回值存储到Spring容器中")])]),v._v(" "),_("tr",[_("td",[v._v("@Import")]),v._v(" "),_("td",[v._v("使用@Import导入的类会被Spring加载到IOC容器中")])]),v._v(" "),_("tr",[_("td",[v._v("@Aspect、@Before、@After、@Around、@Pointcut")]),v._v(" "),_("td",[v._v("用于切面编程（AOP）")])])])]),v._v(" "),_("h4",{attrs:{id:"springmvc"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[v._v("#")]),v._v(" springmvc")]),v._v(" "),_("h6",{attrs:{id:"面-springmvc的执行流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-springmvc的执行流程"}},[v._v("#")]),v._v(" 面：SpringMVC的执行流程")]),v._v(" "),_("ul",[_("li",[v._v("视图阶段（老旧JSP等）")])]),v._v(" "),_("ol",[_("li",[_("p",[v._v("用户通过浏览器发起HttpRequest请求到前端控制器 (DispatcherServlet)。")])]),v._v(" "),_("li",[_("p",[v._v("DispatcherServlet 将用户请求发送给处理器映射器 (HandlerMapping)。")])]),v._v(" "),_("li",[_("p",[v._v("处理器映射器 (HandlerMapping)会根据请求，找到负责处理该请求的处理器，并将其封装为处理器执行链返回 (\nHandlerExecutionChain) 给 DispatcherServlet")])]),v._v(" "),_("li",[_("p",[v._v("DispatcherServlet 会根据处理器执行链中的处理器，找到能够执行该处理器的处理器适配器(HandlerAdaptor)    --注，处理器适配器有多个")])]),v._v(" "),_("li",[_("p",[v._v("处理器适配器 (HandlerAdaptoer) 会调用对应的具体的 Controller")])]),v._v(" "),_("li",[_("p",[v._v("Controller 将处理结果及要跳转的视图封装到一个对象 ModelAndView 中并将其返回给处理器适配器 (HandlerAdaptor)")])]),v._v(" "),_("li",[_("p",[v._v("HandlerAdaptor 直接将 ModelAndView 交给 DispatcherServlet ，至此，业务处理完毕")])]),v._v(" "),_("li",[_("p",[v._v("业务处理完毕后，我们需要将处理结果展示给用户。于是DisptcherServlet调用ViewResolver，将ModelAndView中的视图名称封装为视图对象")])]),v._v(" "),_("li",[_("p",[v._v("ViewResolver 将封装好的视图 (View) 对象返回给 DIspatcherServlet")])]),v._v(" "),_("li",[_("p",[v._v("DispatcherServlet 调用视图对象，让其自己 (View) 进行渲染（将模型数据填充至视图中），形成响应对象 (HttpResponse)")])]),v._v(" "),_("li",[_("p",[v._v("前端控制器 (DispatcherServlet) 响应 (HttpResponse) 给浏览器，展示在页面上。")])])]),v._v(" "),_("ul",[_("li",[v._v("前后端分离阶段（接口开发，异步）")])]),v._v(" "),_("p",[v._v("①用户发送出请求到前端控制器DispatcherServlet")]),v._v(" "),_("p",[v._v("②DispatcherServlet收到请求调用HandlerMapping（处理器映射器）")]),v._v(" "),_("p",[v._v("③HandlerMapping找到具体的处理器，生成处理器对象及处理器拦截器(如果有)，再一起返回给DispatcherServlet。")]),v._v(" "),_("p",[v._v("④DispatcherServlet调用HandlerAdapter（处理器适配器）")]),v._v(" "),_("p",[v._v("⑤HandlerAdapter经过适配调用具体的处理器（Handler/Controller）")]),v._v(" "),_("p",[v._v("⑥方法上添加了@ResponseBody")]),v._v(" "),_("p",[v._v("⑦通过HttpMessageConverter来返回结果转换为JSON并响应")]),v._v(" "),_("h6",{attrs:{id:"面-springmvc常用注解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-springmvc常用注解"}},[v._v("#")]),v._v(" 面：springmvc常用注解")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("注解")])]),v._v(" "),_("th",[_("strong",[v._v("说明")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("@RequestMapping")]),v._v(" "),_("td",[v._v("用于映射请求路径，可以定义在类上和方法上。用于类上，则表示类中的所有的方法都是以该地址作为父路径")])]),v._v(" "),_("tr",[_("td",[v._v("@RequestBody")]),v._v(" "),_("td",[v._v("注解实现接收http请求的json数据，将json转换为java对象")])]),v._v(" "),_("tr",[_("td",[v._v("@RequestParam")]),v._v(" "),_("td",[v._v("指定请求参数的名称")])]),v._v(" "),_("tr",[_("td",[v._v("@PathViriable")]),v._v(" "),_("td",[v._v("从请求路径下中获取请求参数(/user/{id})，传递给方法的形式参数")])]),v._v(" "),_("tr",[_("td",[v._v("@ResponseBody")]),v._v(" "),_("td",[v._v("注解实现将controller方法返回对象转化为json对象响应给客户端")])]),v._v(" "),_("tr",[_("td",[v._v("@RequestHeader")]),v._v(" "),_("td",[v._v("获取指定的请求头数据")])]),v._v(" "),_("tr",[_("td",[v._v("@RestController")]),v._v(" "),_("td",[v._v("@Controller  + @ResponseBody")])])])]),v._v(" "),_("h4",{attrs:{id:"springboot"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#springboot"}},[v._v("#")]),v._v(" springboot")]),v._v(" "),_("h6",{attrs:{id:"面-自动配置原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-自动配置原理"}},[v._v("#")]),v._v(" 面：自动配置原理")]),v._v(" "),_("p",[v._v("1、在Spring Boot项目中的引导类上有一个注解@SpringBootApplication，这个注解是对三个注解进行了封装，分别是：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("@SpringBootConfiguration")])]),v._v(" "),_("li",[_("p",[v._v("@EnableAutoConfiguration")])]),v._v(" "),_("li",[_("p",[v._v("@ComponentScan")])])]),v._v(" "),_("p",[v._v("2、 其中@EnableAutoConfiguration是实现自动化配置的核心注解。 该注解通过@Import注解导入对应的配置选择器。")]),v._v(" "),_("p",[v._v("内部就是读取了该项目和该项目引用的Jar包的的classpath路径下META-INF/spring.factories文件中的所配置的类的全类名。\n在这些配置类中所定义的Bean会根据条件注解所指定的条件来决定是否需要将其导入到Spring容器中。")]),v._v(" "),_("p",[v._v("3,、条件判断会有像@ConditionalOnClass这样的注解，判断是否有对应的class文件，如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。")]),v._v(" "),_("h6",{attrs:{id:"面-springboot常用注解"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-springboot常用注解"}},[v._v("#")]),v._v(" 面：springboot常用注解")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("注解")])]),v._v(" "),_("th",[_("strong",[v._v("说明")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("@SpringBootConfiguration")]),v._v(" "),_("td",[v._v("组合了-  @Configuration注解，实现配置文件的功能")])]),v._v(" "),_("tr",[_("td",[v._v("@EnableAutoConfiguration")]),v._v(" "),_("td",[v._v("打开自动配置的功能，也可以关闭某个自动配置的选")])]),v._v(" "),_("tr",[_("td",[v._v("@ComponentScan")]),v._v(" "),_("td",[v._v("Spring组件扫描")])])])]),v._v(" "),_("h4",{attrs:{id:"mybaits"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybaits"}},[v._v("#")]),v._v(" mybaits")]),v._v(" "),_("h6",{attrs:{id:"面-执行流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-执行流程"}},[v._v("#")]),v._v(" 面：执行流程")]),v._v(" "),_("p",[v._v("计算机的基本工作就是存储和计算，而MyBatis是存储领域的利器。MyBatis的基本工作原理就是：先封装SQL，接着调用JDBC操作数据库，最后把数据库返回的表结果封装成Java类。")]),v._v(" "),_("p",[v._v("（1）读取MyBatis的配置文件。mybatis-config.xml为MyBatis的全局配置文件，用于配置数据库连接信息。")]),v._v(" "),_("p",[v._v("（2）加载映射文件。映射文件即SQL映射文件，该文件中配置了操作数据库的SQL语句，需要在MyBatis配置文件mybatis-config.xml中加载。mybatis-config.xml\n文件可以加载多个映射文件，每个文件对应数据库中的一张表。")]),v._v(" "),_("p",[v._v("（3）构造会话工厂。通过MyBatis的环境配置信息构建会话工厂SqlSessionFactory。")]),v._v(" "),_("p",[v._v("（4）创建会话对象。由会话工厂创建SqlSession对象，该对象中包含了执行SQL语句的所有方法。")]),v._v(" "),_("p",[v._v("（5）Executor执行器。MyBatis底层定义了一个Executor接口来操作数据库，它将根据SqlSession传递的参数动态地生成需要执行的SQL语句，同时负责查询缓存的维护。")]),v._v(" "),_("p",[v._v("（6）MappedStatement对象。在Executor接口的执行方法中有一个MappedStatement类型的参数，该参数是对映射信息的封装，用于存储要映射的SQL语句的id、参数等信息。")]),v._v(" "),_("p",[v._v("（7）输入参数映射。输入参数类型可以是Map、List等集合类型，也可以是基本数据类型和POJO类型。输入参数映射过程类似于JDBC对preparedStatement对象设置参数的过程。")]),v._v(" "),_("p",[v._v("（8）输出结果映射。输出结果类型可以是Map、List等集合类型，也可以是基本数据类型和POJO类型。输出结果映射过程类似于JDBC对结果集的解析过程。")]),v._v(" "),_("h6",{attrs:{id:"面-工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-工作原理"}},[v._v("#")]),v._v(" 面：工作原理")]),v._v(" "),_("p",[v._v("关于MyBatis的工作原理，网上的文章是汗牛充栋，但是站长觉得，要结合JDBC来理解MyBatis的工作原理往往才能更透彻。我们知道，JDBC有四个核心对象：")]),v._v(" "),_("ul",[_("li",[v._v("DriverManager，用于注册数据库连接")]),v._v(" "),_("li",[v._v("Connection，与数据库连接对象")]),v._v(" "),_("li",[v._v("Statement/PrepareStatement，操作数据库SQL语句的对象")]),v._v(" "),_("li",[v._v("ResultSet，结果集或一张虚拟表")])]),v._v(" "),_("p",[v._v("而MyBatis也有四大核心对象：")]),v._v(" "),_("ul",[_("li",[v._v("SqlSession对象，该对象中包含了执行SQL语句的所有方法。类似于JDBC里面的Connection。")]),v._v(" "),_("li",[v._v("Executor接口，它将根据SqlSession传递的参数动态地生成需要执行的SQL语句，同时负责查询缓存的维护。类似于JDBC里面的Statement/PrepareStatement。")]),v._v(" "),_("li",[v._v("MappedStatement对象，该对象是对映射SQL的封装，用于存储要映射的SQL语句的id、参数等信息。")]),v._v(" "),_("li",[v._v("ResultHandler对象，用于对返回的结果进行处理，最终得到自己想要的数据格式或类型。可以自定义返回类型。")])]),v._v(" "),_("h6",{attrs:{id:"面-延迟加载时用及原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-延迟加载时用及原理"}},[v._v("#")]),v._v(" 面：延迟加载时用及原理")]),v._v(" "),_("p",[v._v("Mybatis支持延迟记载，但默认没有开启。")]),v._v(" "),_("p",[v._v("查询用户的时候，把用户所属的订单数据也查询出来，这个是立即加载。")]),v._v(" "),_("p",[v._v("查询用户的时候，暂时不查询订单数据，当需要订单的时候，再查询订单，这个就是延迟加载。")]),v._v(" "),_("p",[v._v("延迟加载的意思是：就是在需要用到数据时才进行加载，不需要用到数据时就不加载数据。")]),v._v(" "),_("p",[v._v("Mybatis支持一对一关联对象和一对多关联集合对象的延迟加载")]),v._v(" "),_("p",[v._v("在Mybatis配置文件中，可以配置是否启用延迟加载lazyLoadingEnabled=true|false，默认是关闭的")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("使用CGLIB创建目标对象的代理对象")])]),v._v(" "),_("li",[_("p",[v._v("当调用目标方法user.getOrderList()时，进入拦截器invoke方法，发现user.getOrderList()是null值，执行sql查询order列表")])]),v._v(" "),_("li",[_("p",[v._v("把order查询上来，然后调用user.setOrderList(List"),_("Order",[v._v(" orderList) ，接着完成user.getOrderList()方法的调用")])],1)])]),v._v(" "),_("p",[v._v("1、使用CGLIB创建目标对象的代理对象")]),v._v(" "),_("p",[v._v("2、当调用目标方法时，进入拦截器invoke方法，发现目标方法是null值，执行sql查询")]),v._v(" "),_("p",[v._v("3、获取数据以后，调用set方法设置属性值，再继续查询目标方法，就有值了")]),v._v(" "),_("h6",{attrs:{id:"面-一级、二级缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-一级、二级缓存"}},[v._v("#")]),v._v(" 面：一级、二级缓存")]),v._v(" "),_("p",[v._v("本地缓存，基于PerpetualCache，本质是一个HashMap")]),v._v(" "),_("p",[v._v("一级缓存：作用域是session级别 基于 PerpetualCache 的 HashMap 本地缓存，其存储作用域为\nSession，当Session进行flush或close之后，该Session中的所有Cache就将清空，默认打开一级缓存")]),v._v(" "),_("p",[v._v("二级缓存：作用域是namespace和mapper的作用域，不依赖于session 二级缓存是基于namespace和mapper的作用域起作用的，不是依赖于SQL\nsession，默认也是采用 PerpetualCache，HashMap 存储")]),v._v(" "),_("p",[_("strong",[v._v("注意事项")])]),v._v(" "),_("p",[v._v("1、对于缓存数据更新机制，当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了新增、修改、删除操作后，默认该作用域下所有\nselect 中的缓存将被 clear")]),v._v(" "),_("p",[v._v("2、二级缓存需要缓存的数据实现Serializable接口")]),v._v(" "),_("p",[v._v("3、只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中")]),v._v(" "),_("h6",{attrs:{id:"面-mybatis的二级缓存什么时候会清理缓存中的数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-mybatis的二级缓存什么时候会清理缓存中的数据"}},[v._v("#")]),v._v(" 面：Mybatis的二级缓存什么时候会清理缓存中的数据")]),v._v(" "),_("p",[v._v("当某一个作用域(一级缓存 Session/二级缓存Namespaces)的进行了新增、修改、删除操作后，默认该作用域下所有 select 中的缓存将被\nclear。")]),v._v(" "),_("h4",{attrs:{id:"mybaits-plus"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mybaits-plus"}},[v._v("#")]),v._v(" mybaits-plus")]),v._v(" "),_("h3",{attrs:{id:"mysql"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mysql"}},[v._v("#")]),v._v(" MySQL")]),v._v(" "),_("h4",{attrs:{id:"优化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[v._v("#")]),v._v(" 优化")]),v._v(" "),_("h6",{attrs:{id:"面-如何定位慢查询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-如何定位慢查询"}},[v._v("#")]),v._v(" 面：如何定位慢查询")]),v._v(" "),_("p",[_("strong",[v._v("原因")]),v._v("：")]),v._v(" "),_("p",[v._v("聚合查询 添加临时表")]),v._v(" "),_("p",[v._v("多表查询 优化sql语句的结构")]),v._v(" "),_("p",[v._v("表数据量过大查询 添加索引 分析sql语句 —— 以上都可以用SQL执行计划")]),v._v(" "),_("p",[v._v("深度分页查询")]),v._v(" "),_("p",[_("strong",[v._v("表象")]),v._v("：页面加载过慢，接口压测响应时间过长，超过1s")]),v._v(" "),_("p",[_("strong",[v._v("解决方案1")]),v._v("：开源工具：arthas 运维工具：Prometheus、Skywalking")]),v._v(" "),_("p",[_("strong",[v._v("解决方案2")]),v._v("：MySQL自带的慢日志")]),v._v(" "),_("p",[v._v("慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认10秒）的所有SQL语句的日志")]),v._v(" "),_("p",[v._v("如果要开启慢查询日志，需要在MySQL的配置文件（/etc/my.cnf）中配置如下信息：")]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("# 开启MySQL慢日志查询开关\nslow_query_log=1\n# 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志\nlong_query_time=2\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br")])]),_("p",[_("strong",[v._v("回答")]),v._v("：")]),v._v(" "),_("p",[_("em",[v._v("1、介绍一下当时产生问题的场景（我们当时的一个接口测试的时候非常的慢，压测的结果大概5秒钟）\n2.我们系统中当时采用了运维工具（ Skywalking ），可以监测出哪个接口，最终因为是sql的问题")]),v._v(" "),_("em",[v._v("3.在mysql中开启了慢日志查询，我们设置的值就是2秒，一旦sql执行超过2秒就会记录到日志中（调试阶段）")])]),v._v(" "),_("h6",{attrs:{id:"面-sql执行很慢-如何分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-sql执行很慢-如何分析"}},[v._v("#")]),v._v(" 面：SQL执行很慢，如何分析")]),v._v(" "),_("p",[_("strong",[v._v("很秀")])]),v._v(" "),_("p",[v._v("可以采用EXPLAIN 或者 DESC命令获取 MySQL 如何执行 SELECT 语句的信息")]),v._v(" "),_("p",[v._v("type 这条sql的连接的类型，性能由好到差为NULL、system、const、eq_ref、ref、range、 index、all")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("system：查询系统中的表")])]),v._v(" "),_("li",[_("p",[v._v("const：根据主键查询")])]),v._v(" "),_("li",[_("p",[v._v("eq_ref：主键索引查询或唯一索引查询")])]),v._v(" "),_("li",[_("p",[v._v("ref：索引查询")])]),v._v(" "),_("li",[_("p",[v._v("range：范围查询")])]),v._v(" "),_("li",[_("p",[v._v("index：索引树扫描 —— 后面两个sql需要优化")])]),v._v(" "),_("li",[_("p",[v._v("all：全盘扫描")])])]),v._v(" "),_("p",[_("strong",[v._v("回答")]),v._v("：")]),v._v(" "),_("p",[_("em",[v._v("可以采用MySQL自带的分析工具\nEXPLAIN。通过key和key_len检查是否命中了索引（索引本身存在是否有失效的情况）；通过type字段查看sql是否有进一步的优化空间，是否存在全索引扫描或全盘扫描，通过extra建议判断，是否出现了回表的情况，如果出现了，可以尝试添加索引或修改返回字段来修复。")])]),v._v(" "),_("h6",{attrs:{id:"面-mysql支持的存储引擎有哪些-有什么区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-mysql支持的存储引擎有哪些-有什么区别"}},[v._v("#")]),v._v(" 面：MYSQL支持的存储引擎有哪些, 有什么区别？")]),v._v(" "),_("h4",{attrs:{id:"索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[v._v("#")]),v._v(" 索引")]),v._v(" "),_("h6",{attrs:{id:"面-索引在项目中的使用方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-索引在项目中的使用方式"}},[v._v("#")]),v._v(" 面：索引在项目中的使用方式")]),v._v(" "),_("p",[v._v("一是验证你的项目场景的真实性，二是为了作为深入发问的切入点。缓存、分布式锁、消息队列、延迟队列")]),v._v(" "),_("h6",{attrs:{id:"面-什么是索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-什么是索引"}},[v._v("#")]),v._v(" 面：什么是索引")]),v._v(" "),_("p",[v._v("索引（index）是帮助MySQL高效获取数据的数据结构(有序)。在数据之外，数据库系统还维护着满足特定查找算法的数据结构（B+树），这些数据结构以某种方式引用（指向）数据，\n这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。")]),v._v(" "),_("p",[v._v("B-Tree，B树是一种多叉路衡查找树，相对于二叉树，B树每个节点可以有多个分支，即多叉。以一颗最大度数（max-degree）为5(5阶)\n的b-tree为例，那这个B树每个节点最多存储4个key。")]),v._v(" "),_("p",[v._v("B+Tree是在BTree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。")]),v._v(" "),_("p",[v._v("B树与B+树对比:①：磁盘读写代价B+树更低；②：查询效率B+树更加稳定；③：B+树便于扫库和区间查询")]),v._v(" "),_("h6",{attrs:{id:"面-聚簇索引和非聚簇索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-聚簇索引和非聚簇索引"}},[v._v("#")]),v._v(" 面：聚簇索引和非聚簇索引")]),v._v(" "),_("p",[v._v("ps：什么是聚集索引，什么是二级索引（非聚集索引）")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("分类")]),v._v(" "),_("th",[v._v("含义")]),v._v(" "),_("th",[v._v("特点")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("聚集索引(Clustered  Index)")]),v._v(" "),_("td",[v._v("将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据")]),v._v(" "),_("td",[v._v("必须有,而且只有一个")])]),v._v(" "),_("tr",[_("td",[v._v("二级索引(Secondary  Index)")]),v._v(" "),_("td",[v._v("将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键")]),v._v(" "),_("td",[v._v("可以存在多个")])])])]),v._v(" "),_("p",[v._v("聚集索引选取规则:")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("如果存在主键，主键索引就是聚集索引。")])]),v._v(" "),_("li",[_("p",[v._v("如果不存在主键，将使用第一个唯一（UNIQUE）索引作为聚集索引。")])]),v._v(" "),_("li",[_("p",[v._v("如果表没有主键，或没有合适的唯一索引，则InnoDB会自动生成一个rowid作为隐藏的聚集索引。")])])]),v._v(" "),_("p",[_("strong",[v._v("回答")]),v._v("：")]),v._v(" "),_("p",[_("em",[v._v("聚簇索引（聚集索引）：数据与索引放到一块，B+树的叶子节点保存了整行数据，有且只有一个")]),v._v(" "),_("em",[v._v("非聚簇索引（二级索引）：数据与索引分开存储，B+树的叶子节点保存对应的主键，可以有多个。")])]),v._v(" "),_("h6",{attrs:{id:"面-回表查询"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-回表查询"}},[v._v("#")]),v._v(" 面：回表查询")]),v._v(" "),_("p",[v._v("通过二级索引找到对应的主键值，到聚集索引中查找整行数据，这个过程就是回表。")]),v._v(" "),_("h6",{attrs:{id:"面-覆盖索引"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-覆盖索引"}},[v._v("#")]),v._v(" 面：覆盖索引")]),v._v(" "),_("p",[_("strong",[v._v("回答")]),v._v("：覆盖索引是指查询使用了索引，返回的列，必须在索引中全部能够找到")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("使用id查询，直接走聚集索引查询，一次索引扫描，直接返回数据，性能高。")])]),v._v(" "),_("li",[_("p",[v._v("如果返回的列中没有创建索引，有可能会触发回表查询，尽量避免使用select *")])])]),v._v(" "),_("h6",{attrs:{id:"面-mysql超大分页"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-mysql超大分页"}},[v._v("#")]),v._v(" 面：MySQL超大分页")]),v._v(" "),_("p",[v._v("优化思路: 一般分页查询时，通过创建 覆盖索引 能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化")]),v._v(" "),_("p",[v._v("select *\nfrom tb_sku t,\n(select id from tb_sku order by id limit 9000000,10) a\nwhere t.id = a.id;")]),v._v(" "),_("h6",{attrs:{id:"面-索引创建原则有哪些"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-索引创建原则有哪些"}},[v._v("#")]),v._v(" 面：索引创建原则有哪些")]),v._v(" "),_("p",[_("strong",[v._v("简答：")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("先陈述自己在实际的工作中是怎么用的")])]),v._v(" "),_("li",[_("p",[v._v("主键索引")])]),v._v(" "),_("li",[_("p",[v._v("唯一索引")])]),v._v(" "),_("li",[_("p",[v._v("根据业务创建的索引(复合索引)")])])]),v._v(" "),_("p",[_("strong",[v._v("精答：")])]),v._v(" "),_("p",[v._v("1). 针对于数据量较大，且查询比较频繁的表建立索引。 如："),_("strong",[v._v("单表超过10w数据，提升用户体验")])]),v._v(" "),_("p",[v._v("2). 针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引。")]),v._v(" "),_("p",[v._v("3). 尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高。 如：地址address区分度不高")]),v._v(" "),_("p",[v._v("4). 如果是字符串类型的字段，字段的长度较长，可以针对于字段的特点，建立前缀索引。 如：商品描述")]),v._v(" "),_("p",[v._v("5). 尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率。 如：")]),v._v(" "),_("p",[v._v("6). 要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价也就越大，会影响增删改的效率。")]),v._v(" "),_("p",[v._v("7). 如果索引列不能存储NULL值，请在创建表时使用NOT NULL约束它。当优化器知道每列是否包含NULL值时，它可以更好地确定哪个索引最有效地用于查询。")]),v._v(" "),_("h6",{attrs:{id:"面-什么情况下索引会失效"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-什么情况下索引会失效"}},[v._v("#")]),v._v(" 面：什么情况下索引会失效")]),v._v(" "),_("p",[v._v("1、违反最左前缀法则")]),v._v(" "),_("p",[v._v("如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。匹配最左前缀法则，走索引：")]),v._v(" "),_("p",[v._v("违法最左前缀法则 ， 索引失效")]),v._v(" "),_("p",[v._v("如果符合最左法则，但是出现跳跃某一列，只有最左列索引生效")]),v._v(" "),_("p",[v._v("2、范围查询右边的列，不能使用索引")]),v._v(" "),_("p",[v._v("根据前面的两个字段 name ， status 查询是走索引的， 但是最后一个条件address 没有用到索引")]),v._v(" "),_("p",[v._v("3、不要在索引列上进行运算操作， 索引将失效")]),v._v(" "),_("p",[v._v("4、字符串不加单引号，造成索引失效。 "),_("strong",[v._v("类型转换")])]),v._v(" "),_("p",[v._v("在查询时，没有对字符串加单引号， MySQL的查询优化器，会自动的进行类型转换，造成索引失效")]),v._v(" "),_("p",[v._v("5、以%开头的Like模糊查询，索引失效。如果仅仅是尾部模糊匹配，索引不会失效。如果是头部模糊匹配，索引失效。")]),v._v(" "),_("p",[v._v("6、索引下推")]),v._v(" "),_("h6",{attrs:{id:"面-谈谈你对sql的优化的经验"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-谈谈你对sql的优化的经验"}},[v._v("#")]),v._v(" 面：谈谈你对sql的优化的经验")]),v._v(" "),_("p",[v._v("表的设计优化、索引优化、SQL语句优化、主从复制、读写分离、分库分表")]),v._v(" "),_("p",[_("strong",[v._v("表的设计优化")])]),v._v(" "),_("p",[v._v("①比如设置合适的数值（tinyint int bigint），要根据实际情况选择")]),v._v(" "),_("p",[v._v("②比如设置合适的字符串类型（char和varchar）char定长效率高，varchar可变长度，效率稍低")]),v._v(" "),_("p",[_("strong",[v._v("SQL语句优化")])]),v._v(" "),_("p",[v._v("①SELECT语句务必指明字段名称（避免直接使用select * ）")]),v._v(" "),_("p",[v._v("②SQL语句要避免造成索引失效的写法")]),v._v(" "),_("p",[v._v("③尽量用union all代替union union会多一次过滤，效率低")]),v._v(" "),_("p",[v._v("④避免在where子句中对字段进行表达式操作")]),v._v(" "),_("p",[v._v("⑤Join优化 能用innerjoin 就不用left join right join，如必须使用 一定要以小表为驱动，内连接会对两个表进行优化，优先把小表放到外边，把大表放到里边。left\njoin 或 right join，不会重新调整顺序")]),v._v(" "),_("p",[_("strong",[v._v("主从复制、读写分离")])]),v._v(" "),_("p",[v._v("如果数据库的使用场景读的操作比较多的时候，为了避免写的操作所造成的性能影响 可以采用读写分离的架构。")]),v._v(" "),_("p",[v._v("读写分离解决的是，数据库的写入，影响了查询的效率。")]),v._v(" "),_("h4",{attrs:{id:"事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[v._v("#")]),v._v(" 事务")]),v._v(" "),_("h6",{attrs:{id:"面-事务的特性是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-事务的特性是什么"}},[v._v("#")]),v._v(" 面：事务的特性是什么")]),v._v(" "),_("p",[v._v("事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。")]),v._v(" "),_("p",[_("strong",[v._v("ACID")])]),v._v(" "),_("p",[v._v("ACID是指数据库事务的四个特性，它们分别是：")]),v._v(" "),_("ol",[_("li",[v._v("Atomicity（原子性）：事务是一个原子操作，要么全部执行，要么全部不执行。如果执行过程中出现错误，则事务会被回滚到初始状态，撤销已经执行的操作。")]),v._v(" "),_("li",[v._v("Consistency（一致性）：事务在执行前后，数据库的约束条件（例如唯一性约束、外键）必须保持一致，保证数据的正确性和合法性。")]),v._v(" "),_("li",[v._v("Isolation（隔离性）：同时运行的多个事务之间是相互隔离的，一个事务的执行过程不会影响其他事务，保证了数据的独立性和隔离性。")]),v._v(" "),_("li",[v._v("Durability（持久性）：事务完成后，对数据的更改必须保证永久性，即使系统崩溃或重启，数据也不会丢失。")])]),v._v(" "),_("p",[v._v("这四个特性是保证数据库系统可靠性、稳定性、一致性的基础，也是衡量数据库系统质量的重要标准之一。")]),v._v(" "),_("h6",{attrs:{id:"面-并发事务带来哪些问题、如何解决这些问题呢、mysql的默认隔离级别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-并发事务带来哪些问题、如何解决这些问题呢、mysql的默认隔离级别"}},[v._v("#")]),v._v(" 面：并发事务带来哪些问题、如何解决这些问题呢、MySQL的默认隔离级别")]),v._v(" "),_("p",[_("strong",[v._v("并发事务问题")]),v._v("：脏读、不可重复读、幻读")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[v._v("问题")])]),v._v(" "),_("th",[_("strong",[v._v("描述")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("脏读")]),v._v(" "),_("td",[v._v("一个事务读到另外一个事务还没有提交的数据。")])]),v._v(" "),_("tr",[_("td",[v._v("不可重复读")]),v._v(" "),_("td",[v._v("一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。")])]),v._v(" "),_("tr",[_("td",[v._v("幻读")]),v._v(" "),_("td",[v._v("一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了”幻影”。")])])])]),v._v(" "),_("p",[_("strong",[v._v("隔离级别")]),v._v("：读未提交、读已提交、可重复读、串行化")]),v._v(" "),_("table",[_("thead",[_("tr",[_("th",[v._v("隔离级别")]),v._v(" "),_("th",[v._v("脏读")]),v._v(" "),_("th",[v._v("不可重复读")]),v._v(" "),_("th",[v._v("幻读")])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("Read  uncommitted  未提交读")]),v._v(" "),_("td",[v._v("√")]),v._v(" "),_("td",[v._v("√")]),v._v(" "),_("td",[v._v("√")])]),v._v(" "),_("tr",[_("td",[v._v("Read  committed 读已提交")]),v._v(" "),_("td",[v._v("×")]),v._v(" "),_("td",[v._v("√")]),v._v(" "),_("td",[v._v("√")])]),v._v(" "),_("tr",[_("td",[v._v("Repeatable  Read(默认) 可重复读")]),v._v(" "),_("td",[v._v("×")]),v._v(" "),_("td",[v._v("×")]),v._v(" "),_("td",[v._v("√")])]),v._v(" "),_("tr",[_("td",[v._v("Serializable  串行化")]),v._v(" "),_("td",[v._v("×")]),v._v(" "),_("td",[v._v("×")]),v._v(" "),_("td",[v._v("×")])])])]),v._v(" "),_("p",[v._v("解决方案：对事务进行隔离")]),v._v(" "),_("p",[v._v("注意：事务隔离级别越高，数据越安全，但是性能越低。")]),v._v(" "),_("h6",{attrs:{id:"面-undo-log和redo-log的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-undo-log和redo-log的区别"}},[v._v("#")]),v._v(" 面：undo log和redo log的区别")]),v._v(" "),_("p",[_("strong",[v._v("redolog")])]),v._v(" "),_("p",[v._v("重做日志，记录的是事务提交时数据页的物理修改，是"),_("em",[v._v("用来实现事务的持久性")]),v._v("。")]),v._v(" "),_("p",[v._v("该日志文件由两部分组成：重做日志缓冲（redo log buffer）以及重做日志文件（redo log\nfile）,前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中, 用于在刷新脏页到磁盘,发生错误时,\n进行数据恢复使用。")]),v._v(" "),_("p",[_("strong",[v._v("undolog")])]),v._v(" "),_("p",[v._v("回滚日志，用于记录数据被修改前的信息 , 作用包含两个 : 提供回滚 和 MVCC(多版本并发控制) 。undo log和redo\nlog记录物理日志不一样，它是逻辑日志。")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，")])]),v._v(" "),_("li",[_("p",[v._v("当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。")])])]),v._v(" "),_("p",[v._v("注意：undo log可以实现事务的一致性和原子性")]),v._v(" "),_("p",[_("strong",[v._v("回答：")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("redo log: 记录的是数据页的物理变化，服务宕机可用来同步数据")])]),v._v(" "),_("li",[_("p",[v._v("undo log ：记录的是逻辑日志，当事务回滚时，通过逆操作恢复原来的数据")])]),v._v(" "),_("li",[_("p",[v._v("redo log保证了事务的持久性，undo log保证了事务的原子性和一致性")])])]),v._v(" "),_("h6",{attrs:{id:"面-事务中的隔离性是如何保证"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-事务中的隔离性是如何保证"}},[v._v("#")]),v._v(" 面：事务中的隔离性是如何保证")]),v._v(" "),_("p",[v._v("锁：排他锁（如一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁）")]),v._v(" "),_("p",[v._v("mvcc : 多版本并发控制")]),v._v(" "),_("h6",{attrs:{id:"面-介绍mvvc-难"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-介绍mvvc-难"}},[v._v("#")]),v._v(" 面：介绍MVVC ~难")]),v._v(" "),_("p",[v._v("全称 Multi-Version Concurrency Control，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突")]),v._v(" "),_("p",[v._v("MVCC的具体实现，主要依赖于数据库记录中的隐式字段、undo log日志、readView。")]),v._v(" "),_("p",[_("strong",[v._v("隐式字段")])]),v._v(" "),_("p",[_("strong",[v._v("Undo Log日志")])]),v._v(" "),_("p",[v._v("回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。")]),v._v(" "),_("p",[v._v("当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。")]),v._v(" "),_("p",[v._v("而update、delete的时候，产生的undo log日志不仅在回滚时需要，mvcc版本访问也需要，不会立即被删除。")]),v._v(" "),_("p",[_("strong",[v._v("read view")])]),v._v(" "),_("h4",{attrs:{id:"主从同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#主从同步"}},[v._v("#")]),v._v(" 主从同步")]),v._v(" "),_("h6",{attrs:{id:"面-mysql主从同步原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-mysql主从同步原理"}},[v._v("#")]),v._v(" 面：MySQL主从同步原理")]),v._v(" "),_("p",[_("strong",[v._v("原理图")])]),v._v(" "),_("p",[_("strong",[v._v("二进制日志")])]),v._v(" "),_("p",[v._v("MySQL主从复制的核心就是二进制日志binlog(DDL（数据定义语言）语句和 DML（数据操纵语言）语句)")]),v._v(" "),_("p",[v._v("1、主库在事务提交时，会把数据变更记录在二进制日志文件 Binlog 中。")]),v._v(" "),_("p",[v._v("2、从库读取主库的二进制日志文件 Binlog ，写入到从库的中继日志 Relay Log 。")]),v._v(" "),_("p",[v._v("3、从库重做中继日志中的事件，将改变反映它自己的数据")]),v._v(" "),_("h4",{attrs:{id:"分库分表"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分库分表"}},[v._v("#")]),v._v(" 分库分表")]),v._v(" "),_("h6",{attrs:{id:"面-分库分表遇到过吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-分库分表遇到过吗"}},[v._v("#")]),v._v(" 面：分库分表遇到过吗")]),v._v(" "),_("ul",[_("li",[v._v("分库分表的时机：")])]),v._v(" "),_("p",[v._v("1、"),_("em",[v._v("前提")]),v._v("，项目业务数据逐渐增多，或业务发展比较迅速 ——单表的数据量达"),_("strong",[v._v("1000W")]),v._v("或"),_("strong",[v._v("20G")]),v._v("以后")]),v._v(" "),_("p",[v._v("2、优化已解决不了性能问题（主从读写分离、查询索引…）")]),v._v(" "),_("p",[v._v("3、IO瓶颈（磁盘IO、网络IO）、CPU瓶颈（聚合查询、连接数太多）")]),v._v(" "),_("ul",[_("li",[v._v("业务介绍")])]),v._v(" "),_("p",[v._v("1、根据自己简历上的项目，想一个数据量较大业务（请求数多或业务累积大）")]),v._v(" "),_("p",[v._v("2、达到了什么样的量级（单表1000万或超过20G）")]),v._v(" "),_("ul",[_("li",[v._v("具体拆分策略")])]),v._v(" "),_("p",[v._v("1、水平分库，将一个库的数据拆分到多个库中，解决海量数据存储和高并发的问题")]),v._v(" "),_("p",[v._v("2、水平分表，解决单表存储和性能的问题")]),v._v(" "),_("p",[v._v("3、垂直分库，根据业务进行拆分，高并发下提高磁盘IO和网络连接数")]),v._v(" "),_("p",[v._v("4、垂直分表，冷热数据分离，多表互不影响")]),v._v(" "),_("h3",{attrs:{id:"redis"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[v._v("#")]),v._v(" Redis")]),v._v(" "),_("h5",{attrs:{id:"缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[v._v("#")]),v._v(" 缓存")]),v._v(" "),_("h6",{attrs:{id:"面-缓存穿透"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-缓存穿透"}},[v._v("#")]),v._v(" 面：缓存穿透")]),v._v(" "),_("p",[v._v("查询不存在的数据。")]),v._v(" "),_("p",[_("strong",[v._v("解决方案")]),v._v("：")]),v._v(" "),_("p",[v._v("1、缓存控制 设置消失时间")]),v._v(" "),_("p",[v._v("2、布隆过滤")]),v._v(" "),_("h6",{attrs:{id:"面-缓存击穿"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-缓存击穿"}},[v._v("#")]),v._v(" 面：缓存击穿")]),v._v(" "),_("p",[v._v("给某一个key设置了过期时间，当key过期的时候，恰好这时间点对这个key有大量的并发请求过来，这些并发的请求可能会瞬间把DB打垮")]),v._v(" "),_("p",[v._v("1、逻辑过期 高可用、性能优")]),v._v(" "),_("p",[v._v("2、互斥锁 强一致、性能差")]),v._v(" "),_("h6",{attrs:{id:"面-缓存雪崩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-缓存雪崩"}},[v._v("#")]),v._v(" 面：缓存雪崩")]),v._v(" "),_("p",[v._v("**原因：**同一时间大量缓存的key同时失效，因为设置了相同的过期时间，或者Rdis服务宕机，导致大量请求到达数据库，带来巨大压力")]),v._v(" "),_("p",[_("strong",[v._v("解决方案")]),v._v("：")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("给不同的key的TTL添加随机值")])]),v._v(" "),_("li",[_("p",[v._v("利用redis集群提高服务的可用性")])]),v._v(" "),_("li",[_("p",[v._v("给缓存业务添加降级限流策略 系统保底策略 可用于雪崩 击穿 穿透")])]),v._v(" "),_("li",[_("p",[v._v("给业务添加多级缓存")])])]),v._v(" "),_("h6",{attrs:{id:"面-双写一致"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-双写一致"}},[v._v("#")]),v._v(" 面：双写一致")]),v._v(" "),_("p",[v._v("注意：一定要设置前提，先介绍自己的业务背景")]),v._v(" "),_("p",[_("strong",[v._v("一致性要求高")])]),v._v(" "),_("p",[v._v("当修改了数据库的数据也要同时更新缓存的数据，缓存和数据库的数据保持一致")]),v._v(" "),_("p",[v._v("读操作：缓存命中，直接返回；缓存为命中查询数据库，写入缓存，设定超时时间")]),v._v(" "),_("p",[v._v("写操作：延迟双删")]),v._v(" "),_("p",[v._v("*先删除缓存，再操作数据库：*缓存拿到的是数据库的旧数据，而数据库就要更新数据了")]),v._v(" "),_("p",[v._v("*先操作数据库，再删除缓存：*缓存拿到的是数据库的旧数据，数据库更新，删除缓存，再写入缓存还是脏数据")]),v._v(" "),_("h6",{attrs:{id:"面-redis作为缓存-数据持久化是怎么做的"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-redis作为缓存-数据持久化是怎么做的"}},[v._v("#")]),v._v(" 面：Redis作为缓存，数据持久化是怎么做的")]),v._v(" "),_("p",[_("strong",[v._v("RDB")])]),v._v(" "),_("p",[v._v("redis database Backup file，redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘。当redis实例故障重启后，从磁盘读取快照文件，恢复数据。")]),v._v(" "),_("p",[v._v("save/bgsave：推荐使用子进程进行RDB，避免主进程受到影响")]),v._v(" "),_("p",[v._v("执行原理：异步，子进程共享主进程的内存数据，完成fork后读取内存并写入RDB文件")]),v._v(" "),_("p",[v._v("页表：记录虚拟地址和物理地址的映射关系 （计算机组成原理）")]),v._v(" "),_("p",[_("strong",[v._v("AOF")])]),v._v(" "),_("p",[v._v("追加文件。Redis处理每一个写命令都会记录在AOF文件，可以看做是命令日志文件。")]),v._v(" "),_("p",[_("strong",[v._v("对比")])]),v._v(" "),_("table",[_("thead",[_("tr",[_("th"),v._v(" "),_("th",[_("strong",[v._v("RDB")])]),v._v(" "),_("th",[_("strong",[v._v("AOF")])])])]),v._v(" "),_("tbody",[_("tr",[_("td",[v._v("持久化方式")]),v._v(" "),_("td",[v._v("定时对整个内存做快照")]),v._v(" "),_("td",[v._v("记录每一次执行的命令")])]),v._v(" "),_("tr",[_("td",[v._v("数据完整性")]),v._v(" "),_("td",[v._v("不完整，两次备份之间会丢失")]),v._v(" "),_("td",[v._v("相对完整，取决于刷盘策略")])]),v._v(" "),_("tr",[_("td",[v._v("文件大小")]),v._v(" "),_("td",[v._v("会有压缩，文件体积小")]),v._v(" "),_("td",[v._v("记录命令，文件体积很大")])]),v._v(" "),_("tr",[_("td",[v._v("宕机恢复速度")]),v._v(" "),_("td",[v._v("很快")]),v._v(" "),_("td",[v._v("慢")])]),v._v(" "),_("tr",[_("td",[v._v("数据恢复优先级")]),v._v(" "),_("td",[v._v("低，因为数据完整性不如AOF")]),v._v(" "),_("td",[v._v("高，因为数据完整性更高")])]),v._v(" "),_("tr",[_("td",[v._v("系统资源占用")]),v._v(" "),_("td",[v._v("高，大量CPU和内存消耗")]),v._v(" "),_("td",[v._v("低，主要是磁盘IO资源  但AOF重写时会占用大量CPU和内存资源")])]),v._v(" "),_("tr",[_("td",[v._v("使用场景")]),v._v(" "),_("td",[v._v("可以容忍数分钟的数据丢失，追求更快的启动速度")]),v._v(" "),_("td",[v._v("对数据安全性要求较高常见")])])])]),v._v(" "),_("h6",{attrs:{id:"面-数据过期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-数据过期"}},[v._v("#")]),v._v(" 面：数据过期")]),v._v(" "),_("p",[_("strong",[v._v("数据删除策略")])]),v._v(" "),_("p",[v._v("惰性删除：过期删除，没扫描到就没删除，对CPU友好，对内存不友好")]),v._v(" "),_("p",[v._v("定期删除：每隔一段时间，就对一批key进行检查，两种模式slow和fast")]),v._v(" "),_("p",[v._v("策略就是：惰性+定期")]),v._v(" "),_("h6",{attrs:{id:"面-数据淘汰"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-数据淘汰"}},[v._v("#")]),v._v(" 面：数据淘汰")]),v._v(" "),_("p",[_("strong",[v._v("数据淘汰策略")])]),v._v(" "),_("p",[_("strong",[v._v("简答：")])]),v._v(" "),_("p",[v._v("1.Redis提供了8种不同的数据淘汰策略，默认是noeviction不删除任何数据，内存不足直接报错")]),v._v(" "),_("p",[v._v("2.LRU：最少最近使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高。")]),v._v(" "),_("p",[v._v("3.LFU：最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高")]),v._v(" "),_("p",[v._v("平时开发过程中用的比较多的就是allkeys-lru（结合自己的业务场景）")]),v._v(" "),_("h5",{attrs:{id:"分布式锁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[v._v("#")]),v._v(" 分布式锁")]),v._v(" "),_("h6",{attrs:{id:"面-使用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-使用场景"}},[v._v("#")]),v._v(" 面：使用场景")]),v._v(" "),_("p",[v._v("抢券，集群部署模拟，nginx反向代理负载均衡")]),v._v(" "),_("h6",{attrs:{id:"面-实现原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-实现原理"}},[v._v("#")]),v._v(" 面：实现原理")]),v._v(" "),_("p",[v._v("setnx 数据结构实现的")]),v._v(" "),_("p",[v._v("还有redisson分布式锁")]),v._v(" "),_("p",[v._v("del命令 -释放锁")]),v._v(" "),_("p",[v._v("redis实现分布式锁如何合理的控制锁的有效时长？")]),v._v(" "),_("p",[v._v("业务超时或者服务宕机情况 解决：1、根据业务执行时间预估 2、给锁续期")]),v._v(" "),_("p",[v._v("第一个不好控制 第二个更合理")]),v._v(" "),_("p",[v._v("就是redisson实现的分布式锁-执行流程")]),v._v(" "),_("p",[v._v("加锁成功 操作redis 第二线程会每个releasetime/3的时间做一次续期 重置过期时间")]),v._v(" "),_("p",[v._v("手动释放锁 通知对应的watchdog就行")]),v._v(" "),_("p",[v._v("不仅仅如此 新的线程也是 先加锁 成功去执行业务 没成功就会while循环 不断尝试获取锁 设定一个阈值 没成功就算了 加入等待机制\n可以在高并发的情况下")]),v._v(" "),_("p",[v._v("加锁，设置过期时间等操作都是基于lua脚本完成的")]),v._v(" "),_("p",[v._v("redisson的锁是否可重入呢？")]),v._v(" "),_("p",[v._v("根据线程id进行判断 如果是同一个线程就可以成功 如果不是就会失败")]),v._v(" "),_("p",[v._v("跟多线程的undolog就是一样的 可以避免多个锁出现死锁的情况 利用hash结构记录线程id和重入次数")]),v._v(" "),_("p",[v._v("可重入逻辑讲解 就是 线程里面会调用 其他方法 这个方法用的锁和该线程的锁是一致的")]),v._v(" "),_("p",[v._v("分布式锁能保证 主从一致性吗？")]),v._v(" "),_("p",[v._v("主节点和从节点 主就是写 从就是读")]),v._v(" "),_("p",[v._v("正常情况 获取锁给主节点 主节点挂了 那就从节点顶上 那么其他业务也能拿到锁")]),v._v(" "),_("p",[v._v("红锁解决，不能只在一个redis实例上创建锁，应该是多个redis实例上创建n/2 + 1，避免一个redis实例上加锁 实现比较复杂 性能差 运维繁琐")]),v._v(" "),_("p",[v._v("低概率事件 强一致性 用CP思想 zookeeper")]),v._v(" "),_("p",[v._v("我们就是AP思想 redis")]),v._v(" "),_("h6",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),_("p",[v._v("做过的业务进行分布式锁使用的场景")]),v._v(" "),_("p",[v._v("redisson实现的分布式锁 底层setnx和lua脚本")]),v._v(" "),_("p",[v._v("还有一个看门狗机制 默认10秒续期一次")]),v._v(" "),_("p",[v._v("可以重入嘛 可以重入 判断线程id是不是一致 hash结构")]),v._v(" "),_("p",[v._v("不能解决主从数据一致的问题 红锁性能低 非要保证只能用CP思想 zookeeper")]),v._v(" "),_("h5",{attrs:{id:"其他"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[v._v("#")]),v._v(" 其他")]),v._v(" "),_("p",[v._v("redis集群有哪些方案？")]),v._v(" "),_("h6",{attrs:{id:"面-主从复制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-主从复制"}},[v._v("#")]),v._v(" 面：主从复制")]),v._v(" "),_("p",[v._v("单节点redis的并发能力是有上限的，要进一步提高redis的并发能力，就需要搭建主从集群，实现读写分离")]),v._v(" "),_("p",[v._v("主节点和从节点 主节点写 同步给 从节点读")]),v._v(" "),_("p",[v._v("主从同步流程：")]),v._v(" "),_("p",[v._v("1.主从"),_("strong",[v._v("全量同步")]),v._v(" 执行relicaof命令建立连接 从向主 请求数据同步 判断是否是第一次同步 是第一次 返回master的数据版本信息\n保存版本信息 执行bgsave 生成RDB 发送给从节点 清空本地数据 加载RDB文件")]),v._v(" "),_("p",[v._v("如果又来了新的请求 那么日志会记录所有命令 发送repl baklog中的命令 执行接收到的命令")]),v._v(" "),_("p",[_("strong",[v._v("replication id")]),v._v("：数据集标记 id一致 master一个 从节点继承")]),v._v(" "),_("p",[_("strong",[v._v("offset")]),v._v("：偏移量，记录在日志中的数据增多，也会同步，如果从节点的偏移量小于主节点的偏移量，说明从节点的版本落后")]),v._v(" "),_("p",[v._v("随便吹吧 太多了")]),v._v(" "),_("p",[v._v("2.主从"),_("strong",[v._v("增量同步")]),v._v(" 从节点重启或后期数据变化")]),v._v(" "),_("p",[v._v("重启 判断 第一次与否 日志获取 偏移量考察 执行命令")]),v._v(" "),_("p",[v._v("总结：")]),v._v(" "),_("p",[v._v("巴拉巴拉 太多了 主要是增量同步和全量同步")]),v._v(" "),_("h6",{attrs:{id:"面-哨兵模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-哨兵模式"}},[v._v("#")]),v._v(" 面：哨兵模式")]),v._v(" "),_("p",[v._v("redis提供了哨兵机制来实现主从集群的自动故障恢复。哨兵的结构和作用如下：")]),v._v(" "),_("p",[v._v("监控：sentinel会不断检查主节点和从节点是否按预期工作")]),v._v(" "),_("p",[v._v("自动故障恢复：如果master故障，sentinel会将一个salve提升为master。当故障实例恢复后也以新的master为主")]),v._v(" "),_("p",[v._v("同住：sentinel充当redis客户端的服务发现来源，当集群发生故障转移时，会将最新消息推送给redis的客户端")]),v._v(" "),_("p",[v._v("服务状态监控")]),v._v(" "),_("p",[v._v("sentinel基于心态监测服务状态，每隔一秒向集群的每个实例发送ping命令：")]),v._v(" "),_("ul",[_("li",[v._v("主观下线：如果其sentinel节点发现某实例未在规定时间响应，则认为该实例主观下线")]),v._v(" "),_("li",[v._v("客观下线：若超过指定数量的sentinel都认为该实例主观下线，则该实例客观下线。quorum值最好超过sentinel实例数量一半")])]),v._v(" "),_("p",[v._v("哨兵选主规则")]),v._v(" "),_("ul",[_("li",[v._v("首先判断主与从节点断开时间长短，如超过指定值就排该从节点")]),v._v(" "),_("li",[v._v("然后判断从节点的优先值，越小优先级越高")]),v._v(" "),_("li",[v._v("如果优先值相同，则判断从节点的offset值，越大优先级越高")]),v._v(" "),_("li",[v._v("最后是判断slave节点的运行id大小，越小优先级越高")])]),v._v(" "),_("p",[v._v("脑裂")]),v._v(" "),_("h6",{attrs:{id:"面-分片集群、数据读写规则"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-分片集群、数据读写规则"}},[v._v("#")]),v._v(" 面：分片集群、数据读写规则")]),v._v(" "),_("p",[v._v("解决写多读少")]),v._v(" "),_("p",[v._v("主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：")]),v._v(" "),_("ul",[_("li",[v._v("海量数据存储问题")]),v._v(" "),_("li",[v._v("高并发写的问题")])]),v._v(" "),_("p",[v._v("使用分片集群可以解决上述问题，分片集群特质：")]),v._v(" "),_("ul",[_("li",[v._v("集群中有多个master，每个master保存不同数据")]),v._v(" "),_("li",[v._v("每个master都可以有多个slave节点")]),v._v(" "),_("li",[v._v("master之间通过ping监测彼此健康状态")]),v._v(" "),_("li",[v._v("redis可以访问任意个节点 任意路由 最终会被转发到正确节点")])]),v._v(" "),_("p",[v._v("分片集群结构-数据读写")]),v._v(" "),_("p",[v._v("redis分片集群引入了哈希槽的概念，redis集群有16384个哈希槽，每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责异步hash槽")]),v._v(" "),_("p",[v._v("读写数据：根据key的有效部分计算hash值，对16384取余(\n有效部分，如果key前面有大括号，大括号的内容就是有效部分，如果没有，则以key本身作为有效部分)余数作为插槽，寻找插槽所在的实例")]),v._v(" "),_("h6",{attrs:{id:"面-redis是单线程的-为什么还那么快"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-redis是单线程的-为什么还那么快"}},[v._v("#")]),v._v(" 面：redis是单线程的，为什么还那么快")]),v._v(" "),_("ul",[_("li",[v._v("纯内存操作，执行速度非常快")]),v._v(" "),_("li",[v._v("采用单线程，避免不必要的上下文切换可竞争条件，多线程还要考虑线程安全问题")]),v._v(" "),_("li",[v._v("使用I/O多路复用模型，非阻塞IO")])]),v._v(" "),_("p",[v._v("解释一下I/O多路复用模型")]),v._v(" "),_("p",[v._v("redis是纯内存操作，性能瓶颈是网络延迟而不是执行速度，io多路复用模型就是实现了高效的网络请求")]),v._v(" "),_("p",[v._v("用户空间和内核空间 常见的io模型-阻塞io 非阻塞io io多路复用 redis网络模型")]),v._v(" "),_("p",[v._v("用户空间和内核空间")]),v._v(" "),_("p",[v._v("linux系统中一个进程使用的内存情况划分为两部分：内核空间、用户空间")]),v._v(" "),_("p",[v._v("用户空间只能执行受限的命令，不能直接调用系统资源，必须通过内核提供的接口来访问")]),v._v(" "),_("p",[v._v("内核空间可以执行特权命令，调用一起系统资源")]),v._v(" "),_("p",[v._v("硬件 网卡 用户空间-内核空间-硬件")]),v._v(" "),_("p",[v._v("linux为了提高io小笼包，会加入缓冲区：")]),v._v(" "),_("p",[v._v("写数据时，把用户缓冲数据拷贝到内核缓冲区，然后写入设备")]),v._v(" "),_("p",[v._v("读数据时，要从设备读取数据到内核缓冲区，然后拷贝到用户缓冲区")]),v._v(" "),_("p",[v._v("阻塞IO")]),v._v(" "),_("p",[v._v("就是两个阶段都必须阻塞等待")]),v._v(" "),_("p",[v._v("阶段1：用户尝试读数据，数据没到达，内核需要等待数据，此时用户进程也处于阻塞状态")]),v._v(" "),_("p",[v._v("阶段2：数据到达并拷贝到内核缓冲区，代表已就绪，内核数据拷贝到用户缓冲区，拷贝过程中，用户阻塞，拷贝完成后，用户开始处理数据")]),v._v(" "),_("p",[v._v("可以看到用户进程在两个阶段都是阻塞状态")]),v._v(" "),_("p",[v._v("非阻塞IO")]),v._v(" "),_("p",[v._v("非阻塞IO的revfrom操作会立即返回结果而不是阻塞用户进程")]),v._v(" "),_("p",[v._v("阶段一：")]),v._v(" "),_("p",[v._v("1、用户进程尝试读取数据")]),v._v(" "),_("p",[v._v("2、数据尚未到达，内核需要等待数据")]),v._v(" "),_("p",[v._v("3、返回异常给用户进程")]),v._v(" "),_("p",[v._v("4、用户进程拿到error后，再次尝试读取")]),v._v(" "),_("p",[v._v("5、循环往复，直到数据就绪")]),v._v(" "),_("p",[v._v("阶段二：")]),v._v(" "),_("p",[v._v("1、将内核数据拷贝到用户缓冲区")]),v._v(" "),_("p",[v._v("2、拷贝过程中，用户进程依然阻塞等待")]),v._v(" "),_("p",[v._v("3、拷贝完成，用户进程解决阻塞，处理数据")]),v._v(" "),_("p",[v._v("可以看到，非阻塞io模型中，用户进程在第一个阶段是非阻塞，第二个阶段是阻塞状态，但是性能没有提高。而且忙等机制会导致cpu空转，cpu的使用率暴增")]),v._v(" "),_("p",[v._v("io多路复用")]),v._v(" "),_("p",[v._v("是利用单个线程来同时监听多个socket，并在某个soket可读，可写时得到通知，从而避免无效的等待，充分利用cpu资源")]),v._v(" "),_("p",[v._v("阶段1：")]),v._v(" "),_("p",[v._v("1.用户进程调用select，指定要监听的socket集合")]),v._v(" "),_("p",[v._v("2.内核监听对应的多个socket")]),v._v(" "),_("p",[v._v("3.任意一个或多个socket数据就绪就返回readable")]),v._v(" "),_("p",[v._v("4.此过程中用户进程阻塞")]),v._v(" "),_("p",[v._v("阶段2：")]),v._v(" "),_("p",[v._v("1.用户进程找到就绪的socket")]),v._v(" "),_("p",[v._v("2.依次低啊用recvfrom读取数据")]),v._v(" "),_("p",[v._v("3.内核将数据拷贝到用户空间")]),v._v(" "),_("p",[v._v("4.用户进程处理数据")]),v._v(" "),_("p",[v._v("IO多路复用")]),v._v(" "),_("p",[v._v("io多路复用是利用单个线程来监听多个socket，并在某个socket可读，可写是得到用户，从而避免无效的等待，充分利用CPU资源，不过监听socket的方式，通知的方式有有很多种实现，常见的有：")]),v._v(" "),_("p",[v._v("select")]),v._v(" "),_("p",[v._v("poll")]),v._v(" "),_("p",[v._v("epoll")]),v._v(" "),_("p",[v._v("差异：")]),v._v(" "),_("p",[v._v("select和poll只会通知用户进程有socket就绪，但不确定具体是哪个socket，需要用户进程逐个遍历socket来确认")]),v._v(" "),_("p",[v._v("epoll则会在通知用户继承socket就绪同时，把已就绪的socket写入用户空间")]),v._v(" "),_("p",[v._v("redis网络模型")]),v._v(" "),_("p",[v._v("netty模型？？ 有人提的")]),v._v(" "),_("p",[v._v("通过IO多路复用来提高网络性能，并且支持各种不同的的多路复用实现，并且将这些实现进行封装，提供了统一的高性能事件库")]),v._v(" "),_("p",[v._v("连接应答处理器 命令回复处理器 命令请求处理器")]),v._v(" "),_("p",[v._v("多线程 接收请求数据 将数据转为redis命令 选择并执行命令把结果写入缓冲队列")]),v._v(" "),_("p",[_("strong",[v._v("总结")])]),v._v(" "),_("p",[v._v("io多路复用")]),v._v(" "),_("p",[v._v("redis网络模型")]),v._v(" "),_("h6",{attrs:{id:"面-五连问"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-五连问"}},[v._v("#")]),v._v(" 面：五连问")]),v._v(" "),_("ol",[_("li",[v._v("Redis和MySQL如何保证数据一致性？")]),v._v(" "),_("li",[v._v("Redis中的数据如何与MySQL保持同步？")]),v._v(" "),_("li",[v._v("MySQL出现故障时，Redis会如何处理数据的一致性？")]),v._v(" "),_("li",[v._v("如何避免Redis和MySQL之间的数据误差？")]),v._v(" "),_("li",[v._v("Redis如何处理MySQL中的更新和删除操作？")])]),v._v(" "),_("p",[v._v("1、Redis和MySQL可以通过以下方法来保证数据一致性：")]),v._v(" "),_("ul",[_("li",[v._v("应用程序需要使用同一套数据读写模型，如读写都通过Redis进行，或者读写都通过MySQL进行。")]),v._v(" "),_("li",[v._v("应用程序需要处理好在读写过程中发生的异常情况，如Redis和MySQL服务器宕机、网络故障、数据转移等。")]),v._v(" "),_("li",[v._v("在从Redis中读取数据和从MySQL中读取数据之间引入一层缓存层，如memcached，可以有效提高系统的读取效率和稳定性。")])]),v._v(" "),_("p",[v._v("2、Redis和MySQL的数据同步可以通过以下方式实现：")]),v._v(" "),_("ul",[_("li",[v._v("周期性地将MySQL的数据通过程序同步到Redis中，并保持两者数据的一致性。")]),v._v(" "),_("li",[v._v("利用Redis的订阅/发布功能，在MySQL中有数据变化时主动通知Redis进行更新。")]),v._v(" "),_("li",[v._v("还可以在程序设计时使用分布式锁和队列等技术，通过消息队列将Redis和MySQL的数据进行同步。")])]),v._v(" "),_("p",[v._v("3、")]),v._v(" "),_("p",[v._v("当MySQL出现故障时，Redis会根据配置选择采取不同的处理策略。可以选择继续让Redis提供被缓存数据的服务，或者禁止Redis提供服务。一般情况下，为了保证数据的完整性和一致性，应该停止Redis的服务，等MySQL恢复后再重新同步数据。")]),v._v(" "),_("p",[v._v("4、避免Redis和MySQL之间的数据误差，需要做好以下几点：")]),v._v(" "),_("ul",[_("li",[v._v("数据存储之前进行有效性校验，以确保数据的正确性。")]),v._v(" "),_("li",[v._v("对于涉及多个操作的业务，需要使用分布式事务保证数据操作的原子性。")]),v._v(" "),_("li",[v._v("采用一致性哈希算法等分布式数据存储方案，平衡集群节点的负载和数据分布，减少数据误差的可能性。")]),v._v(" "),_("li",[v._v("应用程序中需要正确处理Redis和MySQL之间的数据同步操作，保证数据的一致性。")])]),v._v(" "),_("p",[v._v("5、Redis可以通过以下方式处理MySQL中的更新和删除操作：")]),v._v(" "),_("ul",[_("li",[v._v("在MySQL数据库发生更新或删除操作时，需要将对应的key从Redis中删除，避免旧数据的残留。")]),v._v(" "),_("li",[v._v("如果需要对Redis中的缓存数据进行更新或删除操作，可以使用Redis提供的命令进行操作，如SET和DEL命令。这样可以避免MySQL和Redis之间数据同步不一致的问题。")])]),v._v(" "),_("h3",{attrs:{id:"微服务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[v._v("#")]),v._v(" 微服务")]),v._v(" "),_("h4",{attrs:{id:"springcloud"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#springcloud"}},[v._v("#")]),v._v(" springcloud")]),v._v(" "),_("p",[v._v("常用组件有哪些")]),v._v(" "),_("p",[v._v("5大组件：")]),v._v(" "),_("p",[v._v("Eureka 注册中心-配置中心")]),v._v(" "),_("p",[v._v("gateway 网关")]),v._v(" "),_("p",[v._v("feign 远程调用")]),v._v(" "),_("p",[v._v("ribbon 负载均衡")]),v._v(" "),_("p",[v._v("hystric 服务熔断")]),v._v(" "),_("p",[v._v("springcloudAlibaba：")]),v._v(" "),_("p",[v._v("nacos")]),v._v(" "),_("p",[v._v("ribbon")]),v._v(" "),_("p",[v._v("feign")]),v._v(" "),_("p",[v._v("sentinel 服务保护")]),v._v(" "),_("p",[v._v("gateway 服务网关")]),v._v(" "),_("h5",{attrs:{id:"服务注册"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务注册"}},[v._v("#")]),v._v(" 服务注册")]),v._v(" "),_("h6",{attrs:{id:"面-服务注册和发现是什么意思-springcloud如何实现服务注册发现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#面-服务注册和发现是什么意思-springcloud如何实现服务注册发现"}},[v._v("#")]),v._v(" 面：服务注册和发现是什么意思？springcloud如何实现服务注册发现？")]),v._v(" "),_("p",[v._v("微服务必须要使用的组件，考察我们使用微服务的程度")]),v._v(" "),_("p",[v._v("注册中心的核心作用是：服务注册和发现")]),v._v(" "),_("p",[v._v("常见的注册中心：eureka、nacos、zookeeper")]),v._v(" "),_("p",[v._v("我做过xx项目")]),v._v(" "),_("p",[v._v("下单 远程调用 拿到用户的数据 需要用到注册中心 可能有多台服务器")]),v._v(" "),_("p",[v._v("Eureka 作用")]),v._v(" "),_("p",[v._v("1、注册服务信息 服务提供者")]),v._v(" "),_("p",[v._v("2、拉取服务的信息 服务消费者")]),v._v(" "),_("p",[v._v("3、负载均衡")]),v._v(" "),_("p",[v._v("4、远程调用")]),v._v(" "),_("p",[v._v("定期向注册中心 发送心跳续约 如果断了 服务列表就把断了的清掉")]),v._v(" "),_("p",[v._v("所以也有健康监测的作用")]),v._v(" "),_("p",[_("strong",[v._v("总结")]),v._v("：")]),v._v(" "),_("p",[v._v("1.服务注册 服务提供者把自己的信息注册到eureka，它来保存，比如服务名称ip、端口等")]),v._v(" "),_("p",[v._v("2.服务发现 消费者拉取服务列表信息，如果服务提供者有集群，则消费者会利用负载均衡算法，选择一个发起调用")]),v._v(" "),_("p",[v._v("3.服务监控 服务提供者会每隔30秒向eureka发送心跳，报告健康状态，如果eureka服务90s没接收到心跳，从eureka中剔除")]),v._v(" "),_("p",[_("strong",[v._v("nacos 作用？")])]),v._v(" "),_("p",[v._v("和eureka的区别 共同点")]),v._v(" "),_("p",[v._v("nacos工作流程")]),v._v(" "),_("p",[v._v("服务提供者注册服务信息 定时拉取服务pull服务消费者 远程调用服务提供者 临时实例采用心跳监测 非临时实例nacos主动询问\n可以在application.yml进行配置 还能主动变更消息push")]),v._v(" "),_("p",[_("strong",[v._v("区别")])]),v._v(" "),_("p",[v._v("相同：都支持服务注册和服务拉取 都支持服务提供者心跳做健康监测")]),v._v(" "),_("p",[v._v("不同：监测状态方式不同 保留实例方式不同 消息推送方式不同 集群默认采用方式不同思想会变")]),v._v(" "),_("p",[v._v("nacos还多了配置中心，eureka则只有注册中心，也是选择使用nacos的一个重要原因")]),v._v(" "),_("h5",{attrs:{id:"负载均衡"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[v._v("#")]),v._v(" 负载均衡")]),v._v(" "),_("h6",{attrs:{id:"问-负载均衡如何实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#问-负载均衡如何实现"}},[v._v("#")]),v._v(" 问：负载均衡如何实现")]),v._v(" "),_("p",[v._v("负载均衡ribbon，发起远程调用feign就会使用ribbon")]),v._v(" "),_("p",[v._v("订单微服务 和 用户微服务")]),v._v(" "),_("p",[v._v("发起请求 指定某一个服务 调用ribbon负载均衡 从注册中心拉取服务提供者消息 然后将服务提供者按照负载均衡分配给服务消费者")]),v._v(" "),_("p",[v._v("策略如果是轮询")]),v._v(" "),_("p",[v._v("ribbon的负载均衡策略有哪些？")]),v._v(" "),_("p",[v._v("roundRobinRule：简单轮询")]),v._v(" "),_("p",[v._v("WeightedResposeTimeRule：权重来选择服务器")]),v._v(" "),_("p",[v._v("RandomRule：随机策略")]),v._v(" "),_("p",[v._v("BestAvailableRule：忽略那些短路的服务器，并选择并发数较低的服务器")]),v._v(" "),_("p",[v._v("RetryRule：重试机制的选择逻辑")]),v._v(" "),_("p",[v._v("AvaliablilityFilteringRule：可用性敏感策略，先过滤非健康的，再选择连接数较小的策略")]),v._v(" "),_("p",[v._v("ZoneAvoidanceRule：以区域可用的服务器为基础进行服务器的选择。机房，轮询")]),v._v(" "),_("h6",{attrs:{id:"如何自定义服务在均衡策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何自定义服务在均衡策略"}},[v._v("#")]),v._v(" 如何自定义服务在均衡策略")]),v._v(" "),_("p",[v._v("自己创建类IRule接口，然后通过配置类或者配置文件配置即可，通过IRule实现可以修改负载均衡规则，有两种方式")]),v._v(" "),_("p",[v._v("yml文件或者配置类 前局部生效 后全局生效")]),v._v(" "),_("p",[v._v("区域敏策略，服务器的就近原则")]),v._v(" "),_("h5",{attrs:{id:"服务雪崩、熔断降级"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务雪崩、熔断降级"}},[v._v("#")]),v._v(" 服务雪崩、熔断降级")]),v._v(" "),_("h6",{attrs:{id:"什么事服务雪崩"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么事服务雪崩"}},[v._v("#")]),v._v(" 什么事服务雪崩")]),v._v(" "),_("p",[v._v("某一个服务挂了 可能导致服务雪崩 连锁反应")]),v._v(" "),_("p",[v._v("解决 熔断降级")]),v._v(" "),_("p",[v._v("预防 限流")]),v._v(" "),_("p",[_("strong",[v._v("服务降级")])]),v._v(" "),_("p",[v._v("服务自我保护的一种方式，或保护下游服务的一种方式，用于确保服务不受请求突增影响而变得不可用，确保服务不会崩溃正常可以走就是调用\n如果失败就是fallback 获取数据失败 如果降级过多 则会触发熔断机制")]),v._v(" "),_("h5",{attrs:{id:"服务熔断"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断"}},[v._v("#")]),v._v(" 服务熔断")]),v._v(" "),_("p",[v._v("默认关闭 需要开始时在引导类上添加注解 如果监测到10s内请求的失败率超过50% 就触发熔断机制。")]),v._v(" "),_("p",[v._v("之后每隔5s尝试重新请求微服务，如果微服务不能响应，继续走熔断机制")]),v._v(" "),_("p",[v._v("如果微服务可达 则关闭熔断机制，恢复正常请求")]),v._v(" "),_("h4",{attrs:{id:"微服务的监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#微服务的监控"}},[v._v("#")]),v._v(" 微服务的监控")]),v._v(" "),_("h5",{attrs:{id:"监控"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#监控"}},[v._v("#")]),v._v(" 监控")]),v._v(" "),_("p",[v._v("问题定位！性能分析！服务关系！服务告警！")]),v._v(" "),_("p",[v._v("PC APP 小程序 其他 》网关》服务》各种开发软件")]),v._v(" "),_("p",[v._v("springboot-admin 状态信息 功能简单 单一")]),v._v(" "),_("p",[v._v("prometheus+Grafanna 全面 强大 搭建起来复杂")]),v._v(" "),_("p",[v._v("zipkin 链路追踪工具 耦合度高")]),v._v(" "),_("p",[v._v("skywalking 链路追踪根据 也不错")]),v._v(" "),_("p",[_("strong",[v._v("skywalking")])]),v._v(" "),_("p",[v._v("一个分布式系统的应用程序性能监控工具，提供了完整的链路追踪能力")]),v._v(" "),_("p",[v._v("服务 ：业务资源应用系统")]),v._v(" "),_("p",[v._v("端点：应用系统对外暴露的功能接口")]),v._v(" "),_("p",[v._v("实例：物理机")]),v._v(" "),_("p",[v._v("全干工程师")]),v._v(" "),_("p",[v._v("告警规则如下：")]),v._v(" "),_("p",[v._v("……")]),v._v(" "),_("h4",{attrs:{id:"业务相关"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#业务相关"}},[v._v("#")]),v._v(" 业务相关")]),v._v(" "),_("h5",{attrs:{id:"限流"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#限流"}},[v._v("#")]),v._v(" 限流")]),v._v(" "),_("p",[v._v("并发大 防止用户恶意刷接口")]),v._v(" "),_("p",[v._v("方式：tomcat、网关、nginx、自定义拦截器")]),v._v(" "),_("p",[v._v("nginx 控制速率 配置")]),v._v(" "),_("h5",{attrs:{id:"分布式事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[v._v("#")]),v._v(" 分布式事务")]),v._v(" "),_("p",[v._v("CAP和BASE")]),v._v(" "),_("p",[v._v("CAP：一致性 可用性 区分容错性")]),v._v(" "),_("p",[v._v("总结：分布式系统节点肯定是需要网络连接的，p必然存在 高可用性，就不能强一致性 一致性，就要放弃高可用性")]),v._v(" "),_("p",[v._v("Base理论 对CAP的一种解决")]),v._v(" "),_("p",[v._v("基本可用 软状态 最终一致性")]),v._v(" "),_("h5",{attrs:{id:"分布式解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式解决方案"}},[v._v("#")]),v._v(" 分布式解决方案")]),v._v(" "),_("h6",{attrs:{id:"seata架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#seata架构"}},[v._v("#")]),v._v(" seata架构")]),v._v(" "),_("p",[v._v("事务协调者")]),v._v(" "),_("p",[v._v("事务管理器")]),v._v(" "),_("p",[v._v("资源管理器")]),v._v(" "),_("h6",{attrs:{id:"tcc模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcc模式"}},[v._v("#")]),v._v(" tcc模式")]),v._v(" "),_("h6",{attrs:{id:"mq分布式事务"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#mq分布式事务"}},[v._v("#")]),v._v(" mq分布式事务")]),v._v(" "),_("h6",{attrs:{id:"用任务调度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#用任务调度"}},[v._v("#")]),v._v(" 用任务调度")]),v._v(" "),_("h5",{attrs:{id:"分布式服务接口幂等"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式服务接口幂等"}},[v._v("#")]),v._v(" 分布式服务接口幂等")]),v._v(" "),_("p",[v._v("多次调用方法或者接口不会改变业务状态，可以保证重复调用的结果和单次调用的结果一致")]),v._v(" "),_("p",[v._v("需要幂等场景")]),v._v(" "),_("p",[v._v("用户重复点击 网络波动")]),v._v(" "),_("p",[v._v("mq消息重复")]),v._v(" "),_("p",[v._v("应用使用失败或超时机制重试")]),v._v(" "),_("h6",{attrs:{id:"restful"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#restful"}},[v._v("#")]),v._v(" Restful")]),v._v(" "),_("p",[v._v("api风格的角度 进行的")]),v._v(" "),_("p",[v._v("get 查询天然幂等")]),v._v(" "),_("p",[v._v("post 新增操作 不是幂等")]),v._v(" "),_("p",[v._v("put 更新操作，不是幂等")]),v._v(" "),_("p",[v._v("delete 删除操作，是幂等的")]),v._v(" "),_("p",[v._v("数据库的唯一索引 新增")]),v._v(" "),_("p",[v._v("token+redis 新增+修改")]),v._v(" "),_("p",[v._v("创建商品、提交订单、转账、支付等操作")]),v._v(" "),_("p",[v._v("第一次请求 第二次请求 验证")]),v._v(" "),_("h5",{attrs:{id:"分布式任务调度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分布式任务调度"}},[v._v("#")]),v._v(" 分布式任务调度")]),v._v(" "),_("p",[v._v("分布式任务调度")]),v._v(" "),_("p",[v._v("xxl-job")]),v._v(" "),_("h6",{attrs:{id:"当时是什么场景用了任务调度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#当时是什么场景用了任务调度"}},[v._v("#")]),v._v(" 当时是什么场景用了任务调度？")]),v._v(" "),_("p",[v._v("解决集群任务的重复执行问题")]),v._v(" "),_("p",[v._v("cron表达式定义灵活")]),v._v(" "),_("p",[v._v("定时任务失败了，重试和统计")]),v._v(" "),_("p",[v._v("任务量大，分片执行")]),v._v(" "),_("h6",{attrs:{id:"xxl-job路由策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xxl-job路由策略"}},[v._v("#")]),v._v(" xxl-job路由策略？")]),v._v(" "),_("p",[v._v("轮询 随机 一致性 最不经常使用 最近最久未使用 故障转移 忙碌转移 分片广播")]),v._v(" "),_("h6",{attrs:{id:"xxl-job任务执行失败怎么解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#xxl-job任务执行失败怎么解决"}},[v._v("#")]),v._v(" xxl-job任务执行失败怎么解决？")]),v._v(" "),_("p",[v._v("故障转移+失败重试，查看日志分析 邮件告警")]),v._v(" "),_("p",[v._v("任务调度中心")]),v._v(" "),_("p",[v._v("如果有大数据量的任务同时都需要执行，怎么解决")]),v._v(" "),_("p",[v._v("分片广播 一次任务调度")]),v._v(" "),_("h3",{attrs:{id:"消息中间件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息中间件"}},[v._v("#")]),v._v(" 消息中间件")]),v._v(" "),_("p",[v._v("rabbitmq 消息不丢失 消息重复消费 消息堆积 延迟队列 死信队列 高可用机制")]),v._v(" "),_("p",[v._v("kafka 高性能设计 数据存储和清理 消息不丢失 消息重复消费 高可用机制")]),v._v(" "),_("h6",{attrs:{id:"如何保证消息不丢失"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如何保证消息不丢失"}},[v._v("#")]),v._v(" 如何保证消息不丢失？")]),v._v(" "),_("p",[v._v("生产者 交换机 队列 消费者")]),v._v(" "),_("p",[v._v("生产者确认机制 ack")]),v._v(" "),_("h6",{attrs:{id:"消息失败之后如何处理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息失败之后如何处理"}},[v._v("#")]),v._v(" 消息失败之后如何处理？")]),v._v(" "),_("p",[v._v("回调方法即时重发")]),v._v(" "),_("p",[v._v("记录日志")]),v._v(" "),_("p",[v._v("保存到数据库然后定时重发，成功发送后即可删除表中的数据")]),v._v(" "),_("h6",{attrs:{id:"消息持久化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息持久化"}},[v._v("#")]),v._v(" 消息持久化")]),v._v(" "),_("p",[v._v("mq默认是内存存储信息，开启持久化功能可以确保缓存在mQ中的消息不丢失")]),v._v(" "),_("p",[v._v("1.交换机持久化")]),v._v(" "),_("p",[v._v("2.队列持久化")]),v._v(" "),_("p",[v._v("3.消息持久化")]),v._v(" "),_("h6",{attrs:{id:"消费者确认"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消费者确认"}},[v._v("#")]),v._v(" 消费者确认")]),v._v(" "),_("p",[v._v("springAMQP 允许配置三种确认模式")]),v._v(" "),_("ul",[_("li",[_("p",[v._v("manual：手动ack，需要在业务代码结束后，调用api发送ack")])]),v._v(" "),_("li",[_("p",[v._v("auto：自动ack，由spring监测listener代码是否出现异常，没有异常则返回ack;抛出异常则返回nack")])]),v._v(" "),_("li",[_("p",[v._v("none：关闭ack，mq假定消费者获取消息后会成功处理，因此消息投递后立即被删除")])])]),v._v(" "),_("p",[v._v("我们可以利用spring的重试机制，消息投递到异常交换机，由人工处理")]),v._v(" "),_("h5",{attrs:{id:"消息的重复消费如何解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#消息的重复消费如何解决"}},[v._v("#")]),v._v(" 消息的重复消费如何解决？")]),v._v(" "),_("p",[v._v("原因：网络抖动，消费者挂了")]),v._v(" "),_("p",[v._v("业务唯一标识：支付id、订单id、文章id")]),v._v(" "),_("p",[v._v("解决方案：")]),v._v(" "),_("ul",[_("li",[v._v("每条消息设置一个唯一的标识id")]),v._v(" "),_("li",[v._v("幂等方案：分布式锁、数据库锁（乐观锁、悲观锁）")])]),v._v(" "),_("h4",{attrs:{id:"rabbitmq"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq"}},[v._v("#")]),v._v(" rabbitmq")]),v._v(" "),_("h5",{attrs:{id:"rabbitmq的死信交换机-延迟队列有了解过嘛"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq的死信交换机-延迟队列有了解过嘛"}},[v._v("#")]),v._v(" rabbitmq的死信交换机？延迟队列有了解过嘛？")]),v._v(" "),_("p",[v._v("延迟队列：进入队列的消息会被延迟消费的队列")]),v._v(" "),_("p",[v._v("场景：超时订单、限时优惠、定时发布")]),v._v(" "),_("p",[v._v("延迟队列=死信交换机+TTL")]),v._v(" "),_("h6",{attrs:{id:"死信交换机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#死信交换机"}},[v._v("#")]),v._v(" 死信交换机")]),v._v(" "),_("p",[v._v("消费者使用reject或nack声明消费失败，并且消息的requeue的参数设置为false")]),v._v(" "),_("p",[v._v("消息是一个过期消息，超时无人消费")]),v._v(" "),_("p",[v._v("要投递的队列消息堆积满了，最早的消息可能成为死信")]),v._v(" "),_("p",[v._v("如果该队列配置了dead-letter-exchang属性，制定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机成为死信交换机（DLX）")]),v._v(" "),_("h6",{attrs:{id:"ttl"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#ttl"}},[v._v("#")]),v._v(" TTL")]),v._v(" "),_("p",[v._v("time to live")]),v._v(" "),_("p",[v._v("ttl结束了，仍未消费，则会变成死信")]),v._v(" "),_("p",[v._v("分两种情况：消息所在的队列设置了存活时间 消息本身设置了存活时间")]),v._v(" "),_("h6",{attrs:{id:"延迟队列插件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#延迟队列插件"}},[v._v("#")]),v._v(" 延迟队列插件")]),v._v(" "),_("p",[v._v("本质还是官方的三种交换机，只是添加了延迟功能。因此使用时只需要声明一个交换机，交换机的类型可以是任意类型，然后设定delayed属性为true即可。发送消息时，添加x-delay头，值为超时时间。")]),v._v(" "),_("h5",{attrs:{id:"如果有100万消息堆积在mq怎么解决"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#如果有100万消息堆积在mq怎么解决"}},[v._v("#")]),v._v(" 如果有100万消息堆积在mq怎么解决？")]),v._v(" "),_("p",[v._v("生产者发送的消息的速度超过了消费者处理消息的速度，导致队列中的存储消息达到上限。之后发送的消息会就会成为死信，可能会被丢弃，这就是消息堆积问题。")]),v._v(" "),_("p",[v._v("增加更多的消费者，提高消费速度。")]),v._v(" "),_("p",[v._v("在消费者内开启线程池加快消息处理速度。")]),v._v(" "),_("p",[v._v("扩大队列容积，提高堆积上限。")]),v._v(" "),_("h6",{attrs:{id:"惰性队列"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#惰性队列"}},[v._v("#")]),v._v(" 惰性队列")]),v._v(" "),_("p",[v._v("接收到消息后直接存入磁盘而非内存。")]),v._v(" "),_("p",[v._v("消费者要消费消息时，才会从磁盘中并加载到内存。")]),v._v(" "),_("p",[v._v("支持数百万条的消息存储。")]),v._v(" "),_("h5",{attrs:{id:"rabbitmq的高可用机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq的高可用机制"}},[v._v("#")]),v._v(" rabbitmq的高可用机制")]),v._v(" "),_("p",[v._v("采用集群来保证高可用性")]),v._v(" "),_("p",[v._v("普通集群 或者叫标准集群，具备下列特征")]),v._v(" "),_("p",[v._v("会在集群的各个节点间共享不符数据，包括：交换机、队列。不包含队列中的消息。")]),v._v(" "),_("p",[v._v("当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回。")]),v._v(" "),_("p",[v._v("队列所在节点宕机，队列中的消息就会丢失。")]),v._v(" "),_("p",[v._v("镜像集群")]),v._v(" "),_("p",[v._v("仲裁队列")]),v._v(" "),_("h4",{attrs:{id:"kafka"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka"}},[v._v("#")]),v._v(" kafka")]),v._v(" "),_("h5",{attrs:{id:"kafka是如何保证消息不丢失"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka是如何保证消息不丢失"}},[v._v("#")]),v._v(" kafka是如何保证消息不丢失")]),v._v(" "),_("h5",{attrs:{id:"kafka如何保证消息顺序"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka如何保证消息顺序"}},[v._v("#")]),v._v(" kafka如何保证消息顺序")]),v._v(" "),_("p",[v._v("指定分区好和业务相同的key")]),v._v(" "),_("h5",{attrs:{id:"kafka的高可用机制有了解吗"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#kafka的高可用机制有了解吗"}},[v._v("#")]),v._v(" kafka的高可用机制有了解吗")]),v._v(" "),_("p",[v._v("集群模式")]),v._v(" "),_("p",[v._v("分区备份模式")]),v._v(" "),_("h5",{attrs:{id:"数据清理机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据清理机制"}},[v._v("#")]),v._v(" 数据清理机制")]),v._v(" "),_("p",[v._v("kafka存储结构")]),v._v(" "),_("p",[v._v("日志清理策略两个：保留时间 存储数据大小")]),v._v(" "),_("h5",{attrs:{id:"高性能设计有了解过嘛"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#高性能设计有了解过嘛"}},[v._v("#")]),v._v(" 高性能设计有了解过嘛")]),v._v(" "),_("p",[v._v("消息分区")]),v._v(" "),_("p",[v._v("顺序读写")]),v._v(" "),_("p",[v._v("页缓存")]),v._v(" "),_("p",[v._v("零拷贝")]),v._v(" "),_("p",[v._v("消息压缩")]),v._v(" "),_("p",[v._v("分批发送")])])}),[],!1,null,null,null);_.default=s.exports}}]);
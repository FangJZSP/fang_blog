(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{469:function(a,t,s){"use strict";s.r(t);var r=s(2),v=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"路由-express中的路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由-express中的路由"}},[a._v("#")]),a._v(" 路由 express中的路由")]),a._v(" "),t("p",[a._v("映射的关系")]),a._v(" "),t("p",[a._v("app.method{path, handler}")]),a._v(" "),t("p",[a._v("请求类型 请求url路径 处理函数")]),a._v(" "),t("p",[a._v("路由的匹配过程")]),a._v(" "),t("p",[a._v("从上到下处理请求")]),a._v(" "),t("p",[a._v("直接挂载到app实例代码上")]),a._v(" "),t("p",[a._v("路由挂载太多了，需要简化")]),a._v(" "),t("h3",{attrs:{id:"路由-路由的模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由-路由的模块化"}},[a._v("#")]),a._v(" 路由 路由的模块化")]),a._v(" "),t("h4",{attrs:{id:"模块化路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块化路由"}},[a._v("#")]),a._v(" 模块化路由")]),a._v(" "),t("h5",{attrs:{id:"为模块加统一的访问前缀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为模块加统一的访问前缀"}},[a._v("#")]),a._v(" 为模块加统一的访问前缀")]),a._v(" "),t("h4",{attrs:{id:"创建一个路由模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个路由模块"}},[a._v("#")]),a._v(" 创建一个路由模块")]),a._v(" "),t("p",[a._v("导入 创建 挂载 导出")]),a._v(" "),t("h4",{attrs:{id:"如何注册路由模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何注册路由模块"}},[a._v("#")]),a._v(" 如何注册路由模块")]),a._v(" "),t("p",[a._v("注册 app.use(router)")]),a._v(" "),t("p",[a._v("直接导入，注册全局中间件,然后请求")]),a._v(" "),t("h3",{attrs:{id:"中间件-中间件的概念与格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件-中间件的概念与格式"}},[a._v("#")]),a._v(" 中间件-中间件的概念与格式")]),a._v(" "),t("h4",{attrs:{id:"中间件的概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件的概念"}},[a._v("#")]),a._v(" 中间件的概念")]),a._v(" "),t("p",[a._v("对请求进行预处理")]),a._v(" "),t("p",[a._v("可能需要中间处理 譬如 token校验等等")]),a._v(" "),t("p",[a._v("最后处理完毕，最后响应给服务器")]),a._v(" "),t("h4",{attrs:{id:"express中间件的格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#express中间件的格式"}},[a._v("#")]),a._v(" express中间件的格式")]),a._v(" "),t("p",[a._v("本质上就是一个function处理函数")]),a._v(" "),t("p",[a._v("是否有next")]),a._v(" "),t("h4",{attrs:{id:"next函数的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#next函数的作用"}},[a._v("#")]),a._v(" next函数的作用")]),a._v(" "),t("p",[a._v("实现多个中间件连续调用的关键，交给下一个函数处理")]),a._v(" "),t("h3",{attrs:{id:"全局生效的中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局生效的中间件"}},[a._v("#")]),a._v(" 全局生效的中间件")]),a._v(" "),t("h4",{attrs:{id:"定义一个中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义一个中间件"}},[a._v("#")]),a._v(" 定义一个中间件")]),a._v(" "),t("p",[a._v("mw")]),a._v(" "),t("h5",{attrs:{id:"简化全局中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简化全局中间件"}},[a._v("#")]),a._v(" 简化全局中间件")]),a._v(" "),t("h4",{attrs:{id:"中间件的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件的作用"}},[a._v("#")]),a._v(" 中间件的作用")]),a._v(" "),t("p",[a._v("共享统一分的req和res")]),a._v(" "),t("p",[a._v("可以统一为req或res对象添加自定义的属性或方法，供下游的中间件进行使用")]),a._v(" "),t("h4",{attrs:{id:"定义多个全局中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义多个全局中间件"}},[a._v("#")]),a._v(" 定义多个全局中间件")]),a._v(" "),t("p",[a._v("按照use的顺序进行链式")]),a._v(" "),t("h3",{attrs:{id:"局部生效的中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#局部生效的中间件"}},[a._v("#")]),a._v(" 局部生效的中间件")]),a._v(" "),t("p",[a._v("不使用app.use()定义的中间件，叫做局部生效的中间件")]),a._v(" "),t("p",[a._v("直接在get/post，方法中放到中间的位置就行")]),a._v(" "),t("p",[a._v("还可以用数组，放多个中间件，可以使用多个局部生效的中间件")]),a._v(" "),t("h3",{attrs:{id:"中间件的5个注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件的5个注意事项"}},[a._v("#")]),a._v(" 中间件的5个注意事项")]),a._v(" "),t("ol",[t("li",[a._v("先于路由注册中间件")]),a._v(" "),t("li",[a._v("可以连续调用多个中间件")]),a._v(" "),t("li",[a._v("不要忘记调用next函数")]),a._v(" "),t("li",[a._v("next函数之后不要使用额外的代码")]),a._v(" "),t("li",[a._v("连续调用多个中间件，共享请求响应对象")])]),a._v(" "),t("h3",{attrs:{id:"中间件的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间件的分类"}},[a._v("#")]),a._v(" 中间件的分类")]),a._v(" "),t("h4",{attrs:{id:"应用级别的中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用级别的中间件"}},[a._v("#")]),a._v(" 应用级别的中间件")]),a._v(" "),t("p",[a._v("use/get/post")]),a._v(" "),t("p",[a._v("绑定到app实例上的中间件")]),a._v(" "),t("h4",{attrs:{id:"路由级别的中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由级别的中间件"}},[a._v("#")]),a._v(" 路由级别的中间件")]),a._v(" "),t("p",[a._v("express.Router, 路由级别的中间的中间件")]),a._v(" "),t("h4",{attrs:{id:"错误级别的中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误级别的中间件"}},[a._v("#")]),a._v(" 错误级别的中间件")]),a._v(" "),t("p",[a._v("捕获项目中发生的异常错误")]),a._v(" "),t("p",[a._v("格式(err, req, res, next)")]),a._v(" "),t("p",[a._v("使用异常捕捉器，然后可以向客户端进行发送请求")]),a._v(" "),t("p",[a._v("加到最后就行")]),a._v(" "),t("h4",{attrs:{id:"内置中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内置中间件"}},[a._v("#")]),a._v(" 内置中间件")]),a._v(" "),t("ul",[t("li",[a._v("static 托管静态资源的内置中间件")]),a._v(" "),t("li",[a._v("express.json 解析json格式的请求体数据")]),a._v(" "),t("li",[a._v("express.urlencoded 解析请求体的数据")])]),a._v(" "),t("p",[a._v("请求体 -json格式的请求体")]),a._v(" "),t("p",[a._v("raw就是原始数据格式")]),a._v(" "),t("p",[a._v("可以使用req.body进行接收客户端发送过来的请求体")]),a._v(" "),t("p",[a._v("默认情况下不配置解析表单数据的中间件，则req.body 默认等于undefined")]),a._v(" "),t("p",[a._v("可以使用express.json中间件")]),a._v(" "),t("p",[a._v("urlencoded就用express.urlencoded中间件")]),a._v(" "),t("h4",{attrs:{id:"第三方中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三方中间件"}},[a._v("#")]),a._v(" 第三方中间件")]),a._v(" "),t("h3",{attrs:{id:"自定义中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义中间件"}},[a._v("#")]),a._v(" 自定义中间件")]),a._v(" "),t("p",[a._v("封装成独立的")]),a._v(" "),t("h3",{attrs:{id:"编写接口-创建基本的服务器-创建api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写接口-创建基本的服务器-创建api"}},[a._v("#")]),a._v(" 编写接口 - 创建基本的服务器&创建API")])])}),[],!1,null,null,null);t.default=v.exports}}]);